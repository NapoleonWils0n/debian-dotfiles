#TITLE: debian dotfiles
#+STARTUP: overview hideblocks
#+OPTIONS: num:nil author:nil
#+PROPERTY: header-args :mkdirp yes
* tangle dotfiles
** tangle document

C-c C-v t

** tangle only one code block

C-u C-c C-v t

** tangle from the command line

#+begin_src sh
emacs --batch -l org --eval '(org-babel-tangle-file "~/git/ubuntu-dotfiles/ubuntu-dotfiles.org")'
#+end_src

#+RESULTS:

* debian dotfiles
:PROPERTIES:
:VISIBILITY: children
:END!:
** emacs
*** emacs config
**** init.el

#+NAME: init.el
#+BEGIN_SRC emacs-lisp
;; ----------------------------------------------------------------------------------
;; emacs init.el - also using early-init.el
;; ----------------------------------------------------------------------------------

;; Use a hook so the message doesn't get clobbered by other messages.
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "Emacs ready in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))


;; ----------------------------------------------------------------------------------
;; Bootstrap use-package
;; ----------------------------------------------------------------------------------

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))

(setq use-package-always-ensure t) ;; Automatically install packages if not present


;; ----------------------------------------------------------------------------------
;; melpa packages
;; ----------------------------------------------------------------------------------

(unless (assoc-default "melpa" package-archives)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t))
(unless (assoc-default "elpa" package-archives)
  (add-to-list 'package-archives '("elpa" . "https://elpa.gnu.org/packages/") t))


;; package initialize (use-package will handle installation and requiring)
(package-initialize)


;; ----------------------------------------------------------------------------------
;; doom-theme : use-package
;; ----------------------------------------------------------------------------------

;; doom themes
(use-package doom-themes)


;; ----------------------------------------------------------------------------------
;; modus-vivendi-tinted : load-theme
;; ----------------------------------------------------------------------------------

(load-theme 'modus-vivendi-tinted t)


;; ----------------------------------------------------------------------------------
;; general settings : setq
;; ----------------------------------------------------------------------------------

;; Save all tempfiles in ~/.config/emacs/backups
(setq backup-directory-alist '(("." . "~/.config/emacs/backups")))

;; auto save list
(setq delete-old-versions -1)
(setq version-control t)
(setq vc-make-backup-files t)
(setq auto-save-file-name-transforms '((".*" "~/.config/emacs/auto-save-list/" t)))

;; history
(setq savehist-file "~/.config/emacs/savehist")
(savehist-mode 1)

(setq history-length t)
(setq history-delete-duplicates t)
(setq savehist-save-minibuffer-history 1)
(setq savehist-additional-variables
      '(kill-ring
        search-ring
        regexp-search-ring))


;; dont backup files opened by sudo or doas
(setq backup-enable-predicate
      (lambda (name)
        (and (normal-backup-enable-predicate name)
             (not
              (let ((method (file-remote-p name 'method)))
                (when (stringp method)
                  (member method '("su" "sudo" "doas"))))))))


;; save
(save-place-mode 1)         ;; save cursor position
(desktop-save-mode 0)       ;; dont save the desktop session
(global-auto-revert-mode 1) ;; revert buffers when the underlying file has changed

;; scrolling
(pixel-scroll-precision-mode 1)


;; version control
(setq version-control t)
(setq vc-make-backup-files t)
(setq backup-by-copying t)
(setq delete-old-versions t)
(setq kept-new-versions 6)
(setq kept-old-versions 2)
(setq create-lockfiles nil)
(setq undo-tree-auto-save-history nil)

;; pinentry
(defvar epa-pinentry-mode)
(setq epa-pinentry-mode 'loopback)

;; display time in mode line, hide load average
(setq display-time-format "%H:%M")
(setq display-time-default-load-average nil)
(display-time-mode 1)       ;; display time

;; change prompt from yes or no, to y or n
(setq use-short-answers t)

;; turn off blinking cursor
(setq blink-cursor-mode nil)

;; suppress large file prompt
(setq large-file-warning-threshold nil)

;; always follow symlinks
(setq vc-follow-symlinks t)

;; case insensitive search
(setq read-file-name-completion-ignore-case t)
(setq completion-ignore-case t)

;; M-n, M-p recall previous mini buffer commands
(setq history-length 25)

;; Use spaces instead of tabs
(setq-default indent-tabs-mode nil)

;; Use spaces instead of tabs
(setq-default indent-tabs-mode nil)

;; revert dired and other buffers
(setq global-auto-revert-non-file-buffers t)

;; eww browser text width
(setq shr-width 80)

;; ediff
(setq ediff-window-setup-function 'ediff-setup-windows-plain)
(setq ediff-split-window-function 'split-window-horizontally)

;; disable ring bell
(setq ring-bell-function 'ignore)

;; side windows
(setq switch-to-buffer-obey-display-actions t)

;; hippie expand
(setq save-abbrevs 'silently)
(setq hippie-expand-try-functions-list
      '(try-expand-all-abbrevs
        try-complete-file-name-partially
        try-complete-file-name
        try-expand-dabbrev
        try-expand-dabbrev-from-kill
        try-expand-dabbrev-all-buffers
        try-expand-list
        try-expand-line
        try-complete-lisp-symbol-partially
        try-complete-lisp-symbol))

;; emacs 28 - dictionary server
(setq dictionary-server "localhost")

;; mpd host
(setq mpc-host "/home/djwilcox/.config/mpd/socket")

;; xkb fix for alt and super
(setq x-alt-keysym 'meta)
(setq x-super-keysym 'meta)

;; ----------------------------------------------------------------------------------
;; TAB bar mode
;; ----------------------------------------------------------------------------------

(setq tab-bar-show 1)                     ;; hide bar if <= 1 tabs open
(setq tab-bar-close-button-show nil)      ;; hide close tab button
(setq tab-bar-new-button-show nil)        ;; hide new tab button
(setq tab-bar-new-tab-choice "*scratch*") ;; default tab scratch
(setq tab-bar-close-last-tab-choice 'tab-bar-mode-disable) 
(setq tab-bar-close-tab-select 'recent)
(setq tab-bar-new-tab-to 'right)
(setq tab-bar-tab-hints nil)
(setq tab-bar-separator " ")
(setq tab-bar-auto-width-max '((100) 20))
(setq tab-bar-auto-width t)

;; Customize the tab bar format to add the global mode line string
(setq tab-bar-format '(tab-bar-format-tabs tab-bar-separator tab-bar-format-align-right tab-bar-format-global))

;; menubar in tab bar
(add-to-list 'tab-bar-format #'tab-bar-format-menu-bar)

;; Turn on tab bar mode after startup
(tab-bar-mode 1)

;; tab bar menu bar button
(setq tab-bar-menu-bar-button "👿")


;; ----------------------------------------------------------------------------------
;; buffer list
;; ----------------------------------------------------------------------------------

;; display Buffer List in same window
(add-to-list 'display-buffer-alist
   '("^*Buffer List*" display-buffer-same-window))


;; mandatory, as the dictionary misbehaves!
(add-to-list 'display-buffer-alist
   '("^\\*Dictionary\\*" display-buffer-in-side-window
     (side . right)
     (window-width . 0.50)))

;; Man display in current buffer
(setq Man-notify-method 'bully)


;; ----------------------------------------------------------------------------------
;; functions
;; ----------------------------------------------------------------------------------

;; clear the kill ring
(defun clear-kill-ring ()
  "Clear the results on the kill ring."
  (interactive)
  (setq kill-ring nil))

;; reload init.el
(defun my-reload-init ()
  "reload init.el"
  (interactive)
  (load-file "~/.config/emacs/init.el"))

;; pinch - play urls with mpd
(defun pinch-clipboard ()
  "Send a url from the clipboard to mpd with pinch"
  (interactive)
  (let ((url (current-kill 0 t)))
  (start-process "pinch" nil "pinch" "-i" url)))

;; wayland clipboard
(setq wl-copy-process nil)
(defun wl-copy (text)
  (setq wl-copy-process (make-process :name "wl-copy"
                                      :buffer nil
                                      :command '("wl-copy" "-f" "-n")
                                      :connection-type 'pipe
                                      :noquery t))
  (process-send-string wl-copy-process text)
  (process-send-eof wl-copy-process))
(defun wl-paste ()
  (if (and wl-copy-process (process-live-p wl-copy-process))
      nil ; should return nil if we're the current paste owner
      (shell-command-to-string "wl-paste -n")))
(setq interprogram-cut-function 'wl-copy)
(setq interprogram-paste-function 'wl-paste)


;; ----------------------------------------------------------------------------------
;; add-to-list
;; ----------------------------------------------------------------------------------

;; mutt
(add-to-list 'auto-mode-alist '("/mutt" . mail-mode))

;; exec-path add local bin directory
(add-to-list 'exec-path "~/bin")


;; ----------------------------------------------------------------------------------
;; add-hook
;; ----------------------------------------------------------------------------------

;; Make shebang (#!) file executable when saved
(add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p)

;; visual line mode
(add-hook 'text-mode-hook 'visual-line-mode)

;; h1 line mode
(add-hook 'prog-mode-hook #'hl-line-mode)
(add-hook 'text-mode-hook #'hl-line-mode)


;; ----------------------------------------------------------------------------------
;; keymap-global-set
;; ----------------------------------------------------------------------------------

;; org-capture
(keymap-global-set "C-c c" 'org-capture)

;; press M-/ and invoke hippie-expand
(keymap-global-set "M-/" 'hippie-expand)

;; window-toggle-side-windows
(keymap-global-set "C-x x w" 'window-toggle-side-windows)

;; open dired side window
(keymap-global-set "C-x x s" 'my/window-dired-vc-root-left)

;; complete-symbol
(keymap-global-set "C-." 'complete-symbol)


;; ----------------------------------------------------------------------------------
;; keymap-set
;; ----------------------------------------------------------------------------------

(keymap-set global-map "C-c h" 'iedit-mode)
(keymap-set global-map "C-c l" 'org-store-link)
(keymap-set global-map "C-c a" 'org-agenda)

;; mpv seek to position at point
(keymap-set global-map "C-x ," 'my/mpv-seek-to-position-at-point)

;; mpv dired embark
(with-eval-after-load 'embark
  (define-key embark-file-map "l" #'mpv-play-marked-files))


;; ----------------------------------------------------------------------------------
;; fonts
;; ----------------------------------------------------------------------------------

(defvar efs/default-font-size 180)
(defvar efs/default-variable-font-size 180)


;; ----------------------------------------------------------------------------------
;; set-face-attribute
;; ----------------------------------------------------------------------------------

;; Set the default pitch face
(set-face-attribute 'default nil :font "Fira Code" :height efs/default-font-size)

;; Set the fixed pitch face
(set-face-attribute 'fixed-pitch nil :font "Fira Code" :height efs/default-font-size)

;; Set the variable pitch face
(set-face-attribute 'variable-pitch nil :font "Iosevka" :height efs/default-variable-font-size :weight 'regular)

;; tab bar background
(set-face-attribute 'tab-bar nil
                    :foreground "#93a1a1")

;; active tab
(set-face-attribute 'tab-bar-tab nil
                    :foreground "#51AFEF")

;; inactive tab
(set-face-attribute 'tab-bar-tab-inactive nil
                    :foreground "grey50")

;; ----------------------------------------------------------------------------------
;; doom-modeline
;; ----------------------------------------------------------------------------------

(use-package doom-modeline
  :init
  (setq doom-modeline-icon t
        doom-modeline-buffer-file-name-style 'truncate-except-project
        doom-modeline-time-icon nil
        doom-modeline-buffer-encoding nil
        doom-modeline-major-mode-icon t
        doom-modeline-battery t
        doom-modeline-vcs-icon t
        doom-modeline-vcs-bar-width 4
        doom-modeline-vcs-max-length 15)
  (display-battery-mode t)
  :config
  (doom-modeline-mode 1)
  (doom-modeline-def-modeline 'main
    '(bar matches buffer-info remote-host buffer-position selection-info)
    '(misc-info minor-modes input-method buffer-encoding major-mode process vcs check battery time)))


;; ----------------------------------------------------------------------------------
;; evil
;; ----------------------------------------------------------------------------------

(use-package evil
  :init
  (setq evil-want-keybinding nil
        evil-want-C-i-jump nil)
  :config
  (evil-mode 1))


;; ----------------------------------------------------------------------------------
;; evil-collection
;; ----------------------------------------------------------------------------------

(use-package evil-collection
  :after evil
  :config
  (evil-collection-init)
  ;; dired use h and l
  (evil-collection-define-key 'normal 'dired-mode-map
    "e" 'dired-find-file
    "h" 'dired-up-directory
    "l" 'dired-find-file-mpv))


;; ----------------------------------------------------------------------------------
;; general packages : use-package
;; ----------------------------------------------------------------------------------

(use-package csv-mode)
(use-package evil-leader)
(use-package git-auto-commit-mode)
(use-package iedit)
(use-package nerd-icons)
(use-package nix-mode)
(use-package s)
(use-package shrink-path)
(use-package undo-tree)
(use-package wgrep)
(use-package yaml-mode)
(use-package systemd)


;;----------------------------------------------------------------------------------
;; ob-sync
;;----------------------------------------------------------------------------------

(use-package ob-async
  :config
  ;; ob-async sentinel fix
  (defun no-hide-overlays (orig-fun &rest args)
    (setq org-babel-hide-result-overlays nil))
  (advice-add 'ob-async-org-babel-execute-src-block :before #'no-hide-overlays))


;;----------------------------------------------------------------------------------
;; which-key
;;----------------------------------------------------------------------------------

(use-package which-key
  :config
  (which-key-mode))


;;----------------------------------------------------------------------------------
;; undo-tree
;;----------------------------------------------------------------------------------

(use-package undo-tree
  :config
  (global-undo-tree-mode 1)
  (setq undo-tree-visualizer-timestamps t
        undo-tree-visualizer-diff t))


;; ----------------------------------------------------------------------------------
;; Vertico
;; ----------------------------------------------------------------------------------

(use-package vertico
  :init
  (setq vertico-cycle t)
  :config
  (vertico-mode 1)
  ;; Add vertico keybindings here if they were from vertico-directory and are still desired.
  ;; C-j and C-k are usually default vertico navigation.
  ;; M-h for vertico-directory-up can be implemented as a custom function if needed.
  (with-eval-after-load 'evil
    (define-key vertico-map (kbd "C-j") 'vertico-next)
    (define-key vertico-map (kbd "C-k") 'vertico-previous)
    ;; Example for M-h if needed, requires defining a custom function or finding a vertico equivalent:
    ;; (define-key vertico-map (kbd "M-h") 'my-vertico-directory-up)
    ))


;; ----------------------------------------------------------------------------------
;; Marginalia
;; ----------------------------------------------------------------------------------

(use-package marginalia
  :init
  (setq marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
  :config
  (marginalia-mode 1))


;; ----------------------------------------------------------------------------------
;; Consult
;; ----------------------------------------------------------------------------------

(use-package consult
  :bind
  ("C-s" . consult-line)
  ("C-x b" . consult-buffer) ;; remap switch-to-buffer
  ("M-y" . consult-yank-pop) ;; Moved consult-yank-pop binding here
  :init
  (setq completion-in-region-function #'consult-completion-in-region
        enable-recursive-minibuffers t) ;; It lets you use a new minibuffer when you're in the minibuffer
  :config
  (define-key minibuffer-local-map (kbd "C-r") 'consult-history))


;; ----------------------------------------------------------------------------------
;; Orderless
;; ----------------------------------------------------------------------------------

(use-package orderless
  :init
  (setq completion-styles '(orderless basic)
        completion-category-overrides '((file (styles . (partial-completion))))))


;; ----------------------------------------------------------------------------------
;; Embark
;; ----------------------------------------------------------------------------------

(use-package embark
  :bind
  ([remap describe-bindings] . embark-bindings)
  ("C-," . embark-act)
  :init
  (setq prefix-help-command #'embark-prefix-help-command)
  :config
  (use-package embark-consult
    :after embark consult
    :hook (embark-collect-mode . consult-preview-at-point-mode))

  (defun embark-which-key-indicator ()
    "An embark indicator that displays keymaps using which-key.
  The which-key help message will show the type and value of the
  current target followed by an ellipsis if there are further
  targets."
    (lambda (&optional keymap targets prefix)
      (if (null keymap)
          (which-key--hide-popup-ignore-command)
        (which-key--show-keymap
         (if (eq (plist-get (car targets) :type) 'embark-become)
             "Become"
           (format "Act on %s '%s'%s"
                   (plist-get (car targets) :type)
                   (embark--truncate-target (plist-get (car targets) :target))
                   (if (cdr targets) "…" "")))
         (if prefix
             (pcase (lookup-key keymap prefix 'accept-default)
               ((and (pred keymapp) km) km)
               (_ (key-binding prefix 'accept-default)))
           keymap)
         nil nil t (lambda (binding)
                     (not (string-suffix-p "-argument" (cdr binding))))))))

  (setq embark-indicators
        '(embark-which-key-indicator
          embark-highlight-indicator
          embark-isearch-highlight-indicator))

  (defun embark-hide-which-key-indicator (fn &rest args)
    "Hide the which-key indicator immediately when using the completing-read prompter."
    (which-key--hide-popup-ignore-command)
    (let ((embark-indicators
           (remq #'embark-which-key-indicator embark-indicators)))
      (apply fn args)))

  (advice-add #'embark-completing-read-prompter
              :around #'embark-hide-which-key-indicator))


;; ----------------------------------------------------------------------------------
;; dired (Built-in Emacs functionality)
;; ----------------------------------------------------------------------------------

;; dired hide long listing by default -- Define this function early and globally
(defun my-dired-mode-setup ()
  "Show less information in dired buffers."
  (dired-hide-details-mode 1))

;; Dired setq variables that are safe to set early
(setq dired-kill-when-opening-new-dired-buffer t
      dired-use-ls-dired t
      dired-listing-switches "-ahlv"
      dired-omit-mode t
      dired-recursive-copies 'always
      dired-recursive-deletes 'always
      dired-free-space nil
      dired-dwim-target t)

;; Configuration for built-in 'dired' and 'dired-x'
(with-eval-after-load 'dired
  (require 'dired-x) ;; Load dired-x functionalities

  ;; Set dired-omit-files after dired-x has loaded it
  (setq dired-omit-files (concat dired-omit-files "\\|^\\..+$"))
  (setq dired-guess-shell-alist-user '(("\\.pdf$" "zathura")))

  ;; dired hide async output buffer
  (add-to-list 'display-buffer-alist (cons "\\*Async Shell Command\\*.*" (cons #'display-buffer-no-window nil)))

  ;; Dired hooks (moved here to ensure my-dired-mode-setup is defined)
  (add-hook 'dired-mode-hook 'my-dired-mode-setup)
  (add-hook 'dired-mode-hook (lambda () (dired-omit-mode 1))))


;; ------------------------------------------------------------------------------------------------
;; side-windows
;; ------------------------------------------------------------------------------------------------

;; dired-find-file-other-window 
;; bound to <S-return>, g O, <normal-state> <S-return>, <normal-state> g O

;; dired side window
(defun my/window-dired-vc-root-left ()
  (interactive)
  (let ((dir (if (eq (vc-root-dir) nil)
                 (dired-noselect default-directory)
               (dired-noselect (vc-root-dir)))))
    (display-buffer-in-side-window
     dir `((side . left)
           (slot . 0)
           (window-width . 0.20)
           (window-parameters . ((no-delete-other-windows . t)
                                 (mode-line-format . (""))))))))


;; ----------------------------------------------------------------------------------
;; fd-dired (External Package)
;; ----------------------------------------------------------------------------------

(use-package fd-dired
  :init
  (setq fd-dired-display-in-current-window nil))

;; switch to buffer results automatically
(defcustom fd-dired-display-in-current-window nil
  "Whether display result"
  :type 'boolean
  :safe #'booleanp
  :group 'fd-dired)


;; ----------------------------------------------------------------------------------
;; async and dired-async (dired-async is part of the async package)
;; ----------------------------------------------------------------------------------

(use-package async
  :config
  ;; Enable dired-async-mode after the async package is loaded
  (dired-async-mode 1))


;; ----------------------------------------------------------------------------------
;; rip-grep
;; ----------------------------------------------------------------------------------

(use-package rg
  :config
  ;; rip-grep automatically switch to results buffer
  ;; https://github.com/dajva/rg.el/issues/142
  (advice-add 'rg-run :after
              #'(lambda (_pattern _files _dir &optional _literal _confirm _flags) (pop-to-buffer (rg-buffer-name)))))


;; ----------------------------------------------------------------------------------
;; tramp
;; ----------------------------------------------------------------------------------

(use-package tramp
  :init
  (setq tramp-default-method "ssh"
        tramp-allow-unsafe-temporary-files t)
  :config
  (tramp-set-completion-function "ssh"
                                 '((tramp-parse-sconfig "/etc/ssh_config")
                                   (tramp-parse-sconfig "~/.ssh/config")))
  ;; set tramp shell to bash to avoid zsh problems
  (setenv "SHELL" "/bin/sh")
  (add-to-list 'tramp-backup-directory-alist
               (cons tramp-file-name-regexp nil))
  (add-to-list 'backup-directory-alist (cons tramp-file-name-regexp nil)))


;; ----------------------------------------------------------------------------------
;; org mode
;; ----------------------------------------------------------------------------------

(use-package org
  :defer t
  :init
  (setq org-agenda-files '("~/git/personal/org/")
        org-confirm-babel-evaluate nil
        org-src-fontify-natively t
        org-src-tab-acts-natively t
        org-hide-emphasis-markers t
        org-tags-column 0
        org-src-preserve-indentation t
        org-src-window-setup 'current-window
        org-image-actual-width nil
        org-adapt-indentation nil
        org-export-async-debug t
        org-outline-path-complete-in-steps nil
        org-refile-use-outline-path t
        org-pandoc-options-for-latex-pdf '((latex-engine . "xelatex"))
        org-export-backends '(org md html latex icalendar odt ascii)
        org-todo-keywords
        '((sequence "TODO(t@/!)" "IN-PROGRESS(p/!)" "WAITING(w@/!)" "|" "DONE(d@)"))
        org-log-done t
        org-use-fast-todo-selection t
        org-log-into-drawer t
        org-file-apps
        (quote
         ((auto-mode . emacs)
          ("\\.mm\\'" . default)
          ("\\.x?html?\\'" . default)
          ("\\.mkv\\'" . "mpv %s")
          ("\\.mp4\\'" . "mpv %s")
          ("\\.mov\\'" . "mpv %s")
          ("\\.pdf\\'" . default)))
        browse-url-browser-function 'browse-url-generic
        browse-url-generic-program "firefox")
  :config
  (require 'org-tempo)
  (require 'org-protocol)
  (require 'org-capture)
  (require 'org-faces)

  ;; org-timer covert seconds and milliseconds to hours, minutes, seconds, milliseconds
  (defun my/org-timer-secs-to-hms (s)
    "Convert integer S into hh:mm:ss.m
  If the integer is negative, the string will start with \"-\"."
    (let (sign m h)
      (setq x (number-to-string s)
            seconds (car (split-string x "[.]"))
            milliseconds (cadr (split-string x "[.]"))
            sec (string-to-number seconds)
            ms (string-to-number milliseconds))
      (setq sign (if (< sec 0) "-" "")
            sec (abs sec)
            m (/ sec 60) sec (- sec (* 60 m))
            h (/ m 60) m (- m (* 60 h)))
      (format "%s%02d:%02d:%02d.%02d" sign h m sec ms)))

  ;; org-timer covert hours, minutes, seconds, milliseconds to seconds, milliseconds
  (defun my/org-timer-hms-to-secs (hms)
    "Convert h:mm:ss string to an integer time.
  If the string starts with a minus sign, the integer will be negative."
    (if (not (string-match
              "\\([-+]?[0-9]+\\):\\([0-9]\\{2\\}\\):\\([0-9]\\{2\\}\\)\\([.]?[0-9]\\{0,3\\}\\)"
              hms))
        0
      (let* ((h (string-to-number (match-string 1 hms)))
             (m (string-to-number (match-string 2 hms)))
             (s (string-to-number (match-string 3 hms)))
             (ms (string-to-number (match-string 4 hms)))
             (sign (equal (substring (match-string 1 hms) 0 1) "-")))
        (setq h (abs h))
        (* (if sign -1 1) (+ s (+ ms (* 60 (+ m (* 60 h)))))))))

  ;; resize org headings
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "Iosevka" :weight 'medium :height (cdr face)))

  (setq org-capture-templates
        '(("w" "web site" entry
           (file+olp "~/git/personal/bookmarks/bookmarks.org" "sites")
           "** [[%c][%^{link-description}]]"
           :empty-lines-after 1)
          ("v" "video url" entry
           (file+olp "~/git/personal/bookmarks/video.org" "links")
           "** [[video:%c][%^{link-description}]]"
           :empty-lines-after 1)))

  ;; refile
  (setq org-refile-targets '((nil :maxlevel . 2)
                             (org-agenda-files :maxlevel . 2)))

  (custom-set-faces
   '(org-link ((t (:inherit link :underline nil)))))

  (defadvice org-capture
      (after make-full-window-frame activate)
    "Advise capture to be the only window when used as a popup"
    (if (equal "emacs-capture" (frame-parameter nil 'name))
        (delete-other-windows)))

  (defadvice org-capture-finalize
      (after delete-capture-frame activate)
    "Advise capture-finalize to close the frame"
    (if (equal "emacs-capture" (frame-parameter nil 'name))
        (delete-frame)))

  ;; org-babel shell script
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((shell . t)
     (emacs-lisp . t)
     (python . t)
     (dot . t)))

  ;; yank-media--registered-handlers org mode
  (setq yank-media--registered-handlers '(("image/.*" . #'org-mode--image-yank-handler)))

  ;; org mode image yank handler
  (yank-media-handler "image/.*" #'org-mode--image-yank-handler)

  ;; org-mode insert image as file link from the clipboard
  (defun org-mode--image-yank-handler (type image)
    (let ((file (read-file-name (format "Save %s image to: " type))))
      (when (file-directory-p file) (user-error "%s is a directory"))
      (when (and (file-exists-p file) (not (yes-or-no-p (format "%s exists; overwrite?" file)))) (user-error "%s exists"))
      (with-temp-buffer (set-buffer-multibyte nil) (insert image) (write-region (point-min) (point-max) file))
      (insert (format "[[file:%s]]\n" (file-relative-name file))))))


;; ----------------------------------------------------------------------------------
;; org tree slide
;; ----------------------------------------------------------------------------------

(use-package org-tree-slide
  :init
  (setq org-tree-slide-header nil
        org-tree-slide-activate-message "Presentation started"
        org-tree-slide-deactivate-message "Presentation finished"
        org-tree-slide-slide-in-effect t
        org-tree-slide-breakcrumbs " // "
        org-tree-slide-heading-emphasis nil
        org-tree-slide-slide-in-blank-lines 2
        org-tree-slide-indicator nil)
  :hook (org-tree-slide-play . my/presentation-setup)
  (org-tree-slide-stop . my/presentation-end)
  :config
  ;; presentation start
  (defun my/presentation-setup ()
    (setq-local mode-line-format nil)
    (setq-local face-remapping-alist '((default (:height 1.5) variable-pitch)
                                      (header-line (:height 4.0) variable-pitch)
                                      (org-document-title (:height 1.75) org-document-title)
                                      (org-code (:height 1.55) org-code)
                                      (org-verbatim (:height 1.55) org-verbatim)
                                      (org-block (:height 1.25) org-block)
                                      (org-block-begin-line (:height 0.7) org-block))))

  ;; presentation end
  (defun my/presentation-end ()
    (doom-modeline-set-modeline 'main)
    (setq-local face-remapping-alist '((default fixed-pitch default)))
    (setq-local face-remapping-alist '((default variable-pitch default))))

  ;; Make sure certain org faces use the fixed-pitch face when variable-pitch-mode is on
  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-table nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-formula nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)
  ;; make #+ lines invisible during presentation
  (defvar my-hide-org-meta-line-p nil)
  (defun my-hide-org-meta-line ()
    (interactive)
    (setq my-hide-org-meta-line-p t)
    (set-face-attribute 'org-meta-line nil :foreground (face-attribute 'default :background)))
  (defun my-show-org-meta-line ()
    (interactive)
    (setq my-hide-org-meta-line-p nil)
    (set-face-attribute 'org-meta-line nil :foreground nil))
  (defun my-toggle-org-meta-line ()
    (interactive)
    (if my-hide-org-meta-line-p (my-show-org-meta-line) (my-hide-org-meta-line))))


;; ----------------------------------------------------------------------------------
;; mpv.el 
;; ----------------------------------------------------------------------------------

(use-package mpv
  :init
  ;; mpv-default-options play fullscreen on second display
  (setq mpv-default-options '("--fs"))


  :config
  ;; create a video: link type that opens a url using mpv-play-remote-video
  (org-link-set-parameters "video"
                           :follow #'mpv-play-remote-video
                           :store #'org-video-store-link)
  
  
  ;; org video store link
  (defun org-video-store-link ()
    "Store a link to a video url."
        (org-link-store-props
         :type "video"
         :link link
         :description description))
  
  
  ;; mpv-play-remote-video
  (defun mpv-play-remote-video (url &rest args)
    "Start an mpv process playing the video stream at URL."
    (interactive)
    (unless (mpv--url-p url)
      (user-error "Invalid argument: `%s' (must be a valid URL)" url))
    (if (not mpv--process)
        ;; mpv isnt running play file
        (mpv-start url)
        ;; mpv running append file to playlist
      (mpv--playlist-append url)))
  
  
  ;; mpv-play-clipboard - play url from clipboard
  (defun mpv-play-clipboard ()
    "Start an mpv process playing the video stream at URL."
    (interactive)
    (let ((url (current-kill 0 t)))
    (unless (mpv--url-p url)
      (user-error "Invalid argument: `%s' (must be a valid URL)" url))
    (if (not mpv--process)
        ;; mpv isnt running play file
        (mpv-start url)
        ;; mpv running append file to playlist
      (mpv--playlist-append url))))
  
  
  ;; create a mpv: link type that opens a file using mpv-play
  (defun org-mpv-complete-link (&optional arg)
    (replace-regexp-in-string
     "file:" "mpv:"
     (org-link-complete-file arg)
     t t))
  (org-link-set-parameters "mpv"
    :follow #'mpv-play :complete #'org-mpv-complete-link)
  
  ;; M-RET will insert a new item with the timestamp of the current playback position
  (defun my:mpv/org-metareturn-insert-playback-position ()
    (when-let ((item-beg (org-in-item-p)))
      (when (and (not org-timer-start-time)
                 (mpv-live-p)
                 (save-excursion
                   (goto-char item-beg)
                   (and (not (org-invisible-p)) (org-at-item-timer-p))))
        (my/mpv-insert-playback-position t))))
  (add-hook 'org-metareturn-hook #'my:mpv/org-metareturn-insert-playback-position)


  ;; video and audio mime types
  (defvar supported-mime-types
    '("video/quicktime"
      "video/x-matroska"
      "video/mp4"
      "video/webm"
      "video/x-m4v"
      "video/x-msvideo"
      "audio/x-wav"
      "audio/mpeg"
      "audio/x-hx-aac-adts"
      "audio/mp4"
      "audio/flac"
      "audio/ogg"))
  
  ;; subr-x
  (load "subr-x")
  
  ;; get files mime type
  (defun get-mimetype (filepath)
    (string-trim
     (shell-command-to-string (concat "file -b --mime-type "
                                      (shell-quote-argument filepath)))))
  
  ;; dired-find-file-mpv
  (defun dired-find-file-mpv ()
    "Start an mpv process playing the file at PATH append subsequent files to the playlist"
    (interactive)
    (let ((file (dired-get-file-for-visit)))
      (if (member (get-mimetype file) supported-mime-types)
          (mpv-play-dired file)
        (dired-find-file))))


  ;; mpv play dired marked files
  (defun mpv-play-marked-files ()
    "Play marked files with mpv"
    (interactive)
    (mapc 'mpv-play-dired (dired-get-marked-files nil nil nil t)))


  ;; frame step forward
    (defun mpv-frame-step ()
      "Step one frame forward."
      (interactive)
      (mpv--enqueue '("frame-step") #'ignore))
  
  
  ;; frame step backward
    (defun mpv-frame-back-step ()
      "Step one frame backward."
      (interactive)
      (mpv--enqueue '("frame-back-step") #'ignore))
  
  
  ;; mpv take a screenshot
    (defun mpv-screenshot ()
      "Take a screenshot"
      (interactive)
      (mpv--enqueue '("screenshot") #'ignore))
  
  
  ;; mpv show osd
    (defun mpv-osd ()
      "Show the osd"
      (interactive)
      (mpv--enqueue '("set_property" "osd-level" "3") #'ignore))
  
  
  ;; add a newline in the current document
  (defun end-of-line-and-indented-new-line ()
    (interactive)
    (end-of-line)
    (newline-and-indent))


  ;; mpv insert playback position
  (defun my/mpv-insert-playback-position (&optional arg)
    "Insert the current playback position at point.

  When called with a non-nil ARG, insert a timer list item like `org-timer-item'."
    (interactive "P")
    (let ((time (mpv-get-playback-position)))
      (funcall
       (if arg #'mpv--position-insert-as-org-item #'insert)
       (my/org-timer-secs-to-hms (float time)))))
  
  
  ;; seek to position
  (defun my/mpv-seek-to-position-at-point ()
    "Jump to playback position as inserted by `mpv-insert-playback-position'.

  This can be used with the `org-open-at-point-functions' hook."
    (interactive)
    (save-excursion
      (skip-chars-backward ":[:digit:]" (point-at-bol))
      (when (looking-at "[0-9]+:[0-9]\\{2\\}:[0-9]\\{2\\}\\([.]?[0-9]\\{0,3\\}\\)"))
        (let ((secs (my/org-timer-hms-to-secs (match-string 0))))
          (when (>= secs 0)
            (mpv-seek secs)))))

  
  ;; mpv-play-dired
  (defun mpv-play-dired (path)
  "Start an mpv process playing the file at PATH append subsequent files to the playlist"
    (if (not mpv--process)
        ;; mpv isnt running play file
        (mpv-start (expand-file-name path))
        ;; mpv running append file to playlist
      (mpv--playlist-append (expand-file-name path))))
  ) ;; This is the final closing parenthesis for the entire (use-package mpv ...) block


;; ----------------------------------------------------------------------------------
;; emacs desktop notification center
;; ----------------------------------------------------------------------------------

;; start ednc-mode
(use-package ednc
  :init
  (ednc-mode 1)
  :config
  (defun show-notification-in-buffer (old new)
    (let ((name (format "Notification %d" (ednc-notification-id (or old new)))))
      (with-current-buffer (get-buffer-create name)
        (if new (let ((inhibit-read-only t))
                  (if old (erase-buffer) (ednc-view-mode))
                  (insert (ednc-format-notification new t))
                  (pop-to-buffer (current-buffer)))
          (kill-buffer)))))
  
  
  ;; notifications hook
  (add-hook 'ednc-notification-presentation-functions
            #'show-notification-in-buffer)
  
  ;; open notifications in side window
  (add-to-list 'display-buffer-alist
     '("^Notification *" display-buffer-in-side-window
       (side . right)
       (window-width . 0.50)))
  
  ;; ednc evil - normal mode
  (defun noevil ()
    (evil-define-key 'normal ednc-view-mode-map "d" 'ednc-dismiss-notification)
    (evil-define-key 'normal ednc-view-mode-map (kbd "RET") 'ednc-invoke-action)
  )
  (add-hook 'ednc-view-mode-hook 'noevil))


;; ----------------------------------------------------------------------------------
;; hydra
;; ----------------------------------------------------------------------------------

(use-package hydra
  :after mpv 
  :config
  ;; Define hydra-mpv
  (defhydra hydra-mpv (:hint nil)
    "
    ^Seek^                  ^Actions^               ^General^                       ^Playlists^
    ^^^^^^^^-----------------------------------------------------------------------------------------------------------
    _h_: seek back -5       _,_: back frame         _i_: insert playback position   _n_: next item in playlist
    _j_: seek back -60      _._: forward frame      _m_: insert a newline           _p_: previous item in playlist
    _k_: seek forward 60    _SPC_: pause            _s_: take a screenshot          _e_: jump to playlist entry
    _l_: seek forward 5     _q_: quit mpv           _o_: show the osd               _r_: remove playlist entry
    ^
    "
    ("h" mpv-seek-backward "-5")
    ("j" mpv-seek-backward "-60")
    ("k" mpv-seek-forward "60")
    ("l" mpv-seek-forward "5")
    ("," mpv-frame-back-step)
    ("." mpv-frame-step)
    ("SPC" mpv-pause)
    ("q" mpv-kill)
    ("i" my/mpv-insert-playback-position)
    ("m" end-of-line-and-indented-new-line)
    ("s" mpv-screenshot)
    ("o" mpv-osd)
    ("n" mpv-playlist-next)
    ("p" mpv-playlist-prev)
    ("e" mpv-jump-to-playlist-entry)
    ("r" mpv-remove-playlist-entry))

  ;; Define hydra-emacs
  (defhydra hydra-emacs (:hint nil :exit t)
    "
    ^Actions^
    ^^^^^^^^--------------
    _m_: mpv clipboard
    _p_: pinch url
    ^
    "
    ("m" mpv-play-clipboard)
    ("p" pinch-clipboard))

  ;; Define hydra-nested
  (defvar hydra-stack nil)

  (defhydra hydra-nested (:exit t)
    ("e" hydra-emacs/body "emacs" :column "hydra")
    ("m" hydra-mpv/body "mpv" :column "hydra")
    ("q" nil "quit"))

  ;; Set global keybinding
  (global-set-key (kbd "C-a") 'hydra-nested/body))


;; ----------------------------------------------------------------------------------
;; google-translate
;; ----------------------------------------------------------------------------------

(use-package google-translate
  :config
  (setq google-translate-display-buffer-action
        '(pop-to-buffer-same-window)))


;; ----------------------------------------------------------------------------------
;; magit
;; ----------------------------------------------------------------------------------

(use-package magit
  :init
  (setenv "SSH_AUTH_SOCK" "/run/user/1000/gcr/ssh"))


;; ----------------------------------------------------------------------------------
;; markdown mode
;; ----------------------------------------------------------------------------------

(use-package markdown-mode
  :commands (markdown-mode gfm-mode) ; Define mode functions to autoload the package
  :mode (("\\.md\\'" . markdown-mode) ; Use markdown-mode for *.md files
         ("\\.markdown\\'" . markdown-mode) ; Use markdown-mode for *.markdown files
         ("README\\.md\\'" . gfm-mode)) ; Use gfm-mode for README.md files
  
  :config
  (add-hook 'markdown-mode-hook 'visual-line-mode)
  (setq markdown-command "pandoc")
  )


;; ----------------------------------------------------------------------------------
;; treesitter
;; ----------------------------------------------------------------------------------

(require 'treesit)

;; Use `major-mode-remap-alist` for languages that have a Treesitter major mode.
;; M-x treesit-install-language-grammar bash
(add-to-list
 'treesit-language-source-alist
 '(bash "https://github.com/tree-sitter/tree-sitter-bash.git" "v0.20.1"))

(setq major-mode-remap-alist
      '((sh-mode . bash-ts-mode)))

;; treesitter explore open in side window
(add-to-list 'display-buffer-alist
   '("^*tree-sitter explorer *" display-buffer-in-side-window
     (side . right)
     (window-width . 0.50)))


;; ----------------------------------------------------------------------------------
;; Snippets (YASnippet)
;; ----------------------------------------------------------------------------------

(use-package yasnippet
  :init
  ;; Enable YASnippet globally for all modes.
  (yas-global-mode 1)
  :config
  ;; Load the built-in snippets after the package is ready.
  (yas-reload-all)

  ;; Optional: Set the key for manually expanding a snippet (if TAB is taken)
  ;; By default, TAB usually works unless another minor mode takes it.
  ;; If you need a separate key, uncomment the line below.
  ;; (define-key yas-minor-mode-map (kbd "C-c y") 'yas-expand)
  )

;; Install the massive collection of community snippets
(use-package yasnippet-snippets
  :after yasnippet)


;; ----------------------------------------------------------------------------------
;; YASnippet Completion-At-Point Function (CAPF)
;; ----------------------------------------------------------------------------------

(use-package yasnippet-capf
  ;; Ensure it loads after YASnippet and Cape (if Cape is being used to combine CAPFs)
  :after (yasnippet cape)
  :config
  ;; This function is the one that actually works!
  (add-to-list 'completion-at-point-functions #'yasnippet-capf))


;; ----------------------------------------------------------------------------------
;; corfu
;; ----------------------------------------------------------------------------------

(use-package corfu
  ;; Install the package if not found
  :init
  ;; Enable Corfu globally.
  (global-corfu-mode)

  :custom
  ;; Optional: Enable auto-completion after typing 0 characters (as-you-type)
  (corfu-auto t)
  ;; Optional: Set the delay before the popup appears to 0.1 seconds
  (corfu-auto-delay 0.1))

;; corfu complete
(with-eval-after-load 'evil
  ;; Bind C-. to the standard Emacs completion command, which Corfu is designed to use.
  (define-key evil-normal-state-map (kbd "C-.") 'completion-at-point)
  (define-key evil-insert-state-map (kbd "C-.") 'completion-at-point)
  (define-key evil-visual-state-map (kbd "C-.") 'completion-at-point)
  (define-key evil-motion-state-map (kbd "C-.") 'completion-at-point))

;; Set the global binding as well for non-Evil buffers
(keymap-global-set "C-." 'completion-at-point)

;; ----------------------------------------------------------------------------------
;; cape
;; ----------------------------------------------------------------------------------

(use-package cape
  :demand t 
  :config
  ;; Add a list of cape completion functions to the standard Emacs CAPF
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-keyword)
  )


;; ----------------------------------------------------------------------------------
;; eglot
;; ----------------------------------------------------------------------------------

;; Configure Eglot to recognize and start the language servers.
(with-eval-after-load 'eglot
  ;; sh-mode (for shell scripts) uses 'bash-language-server' with a 'start' argument
  (add-to-list 'eglot-server-programs
               '(sh-mode "bash-language-server" "start"))

  ;; python-mode uses 'python-lsp-server', whose executable is typically 'pylsp'
  (add-to-list 'eglot-server-programs
               '(python-mode "pylsp")))

;; Automatically start Eglot when opening a relevant file
(add-hook 'nix-mode-hook 'eglot-ensure)
(add-hook 'sh-mode-hook 'eglot-ensure)
(add-hook 'python-mode-hook 'eglot-ensure)


;; ----------------------------------------------------------------------------------
;; auth-source
;; ----------------------------------------------------------------------------------

(require 'auth-source)
(add-to-list 'auth-sources (expand-file-name ".authinfo" user-emacs-directory))


;; ----------------------------------------------------------------------------------
;; gptel
;; ----------------------------------------------------------------------------------

(use-package gptel
  :init
  ;; Enable tool use
  (setq gptel-use-tools t)
  (setq gptel-default-mode 'org-mode
        gptel-post-response-functions #'gptel-end-of-response
        gptel-expert-commands t)
  :config
  (setq gptel-model 'gemini-2.5-flash
        gptel-backend (gptel-make-gemini "Gemini"
                                         :key (gptel-api-key-from-auth-source "generativelanguage.googleapis.com")
                                         :stream t))
  

;; ----------------------------------------------------------------------------------
;; display the Ollama buffer in same window
;; ----------------------------------------------------------------------------------

  (add-to-list 'display-buffer-alist
     '("^*Ollama*" display-buffer-same-window))


;; ----------------------------------------------------------------------------------
;; display the Gemini buffer in same window
;; ----------------------------------------------------------------------------------

  (add-to-list 'display-buffer-alist
               '("^*Gemini*" display-buffer-same-window))


;; ----------------------------------------------------------------------------------
;; gptel set org source blocks to use sh and not bash
;; ----------------------------------------------------------------------------------

  (defun my/gptel-fix-src-header (beg end)
    (save-excursion
      (goto-char beg)
      (while (re-search-forward "^#\\+begin_src bash" end t)
        (replace-match "#+begin_src sh"))))

(add-hook 'gptel-post-response-functions #'my/gptel-fix-src-header)


;; ----------------------------------------------------------------------------------
;; gptel-tools create file
;; ----------------------------------------------------------------------------------

    (gptel-make-tool
     :function (lambda (path filename content)
                 (let ((full-path (expand-file-name filename path)))
                   (with-temp-buffer
                     (insert content)
                     (write-file full-path))
                   (format "Created file %s in %s" filename path)))
     :name "create_file"
     :description "Create a new file with the specified content"
     :args (list '(:name "path"
                   :type string
                   :description "The directory where to create the file")
                 '(:name "filename"
                   :type string
                   :description "The name of the file to create")
                 '(:name "content"
                   :type string
                   :description "The content to write to the file"))
     :category "filesystem")


;; ----------------------------------------------------------------------------------
;; gptel-tools read file
;; ----------------------------------------------------------------------------------

  (gptel-make-tool
   :function (lambda (filepath)
               (with-temp-buffer
                 (insert-file-contents (expand-file-name filepath))
                 (buffer-string)))
   :name "read_file"
   :description "Read and display the contents of a file"
   :args (list '(:name "filepath"
                 :type string
                 :description "Path to the file to read. Supports relative paths and ~."))
   :category "filesystem")


;; ----------------------------------------------------------------------------------
;; gptel-tools edit file
;; ----------------------------------------------------------------------------------

  (defun my-gptel--edit_file (file-path file-edits)
    "In FILE-PATH, apply FILE-EDITS with pattern matching and replacing."
    (if (and file-path (not (string= file-path "")) file-edits)
        (with-current-buffer (get-buffer-create "*edit-file*")
          (erase-buffer)
          (insert-file-contents (expand-file-name file-path))
          (let ((inhibit-read-only t)
                (case-fold-search nil)
                (file-name (expand-file-name file-path))
                (edit-success nil))
            ;; apply changes
            (dolist (file-edit (seq-into file-edits 'list))
              (when-let ((line-number (plist-get file-edit :line_number))
                         (old-string (plist-get file-edit :old_string))
                         (new-string (plist-get file-edit :new_string))
                         (is-valid-old-string (not (string= old-string ""))))
                (goto-char (point-min))
                (forward-line (1- line-number))
                (when (search-forward old-string nil t)
                  (replace-match new-string t t)
                  (setq edit-success t))))
            ;; return result to gptel
            (if edit-success
                (progn
                  ;; show diffs
                  (ediff-buffers (find-file-noselect file-name) (current-buffer))
                  (format "Successfully edited %s" file-name))
              (format "Failed to edited %s" file-name))))
      (format "Failed to edited %s" file-path)))
  
  (gptel-make-tool
     :function #'my-gptel--edit_file
     :name "edit_file"
     :description "Edit file with a list of edits, each edit contains a line-number,
  a old-string and a new-string, new-string will replace the old-string at the specified line."
     :args (list '(:name "file-path"
                         :type string
                         :description "The full path of the file to edit")
                 '(:name "file-edits"
                         :type array
                         :items (:type object
                                       :properties
                                       (:line_number
                                        (:type integer :description "The line number of the file where edit starts.")
                                        :old_string
                                        (:type string :description "The old-string to be replaced.")
                                        :new_string
                                        (:type string :description "The new-string to replace old-string.")))
                         :description "The list of edits to apply on the file"))
     :category "filesystem")


;; ----------------------------------------------------------------------------------
;; gptel-tools read buffer
;; ----------------------------------------------------------------------------------

    (gptel-make-tool
     :function (lambda (buffer)
                 (unless (buffer-live-p (get-buffer buffer))
                   (error "Error: buffer %s is not live." buffer))
                 (with-current-buffer buffer
                   (buffer-substring-no-properties (point-min) (point-max))))
     :name "read_buffer"
     :description "Return the contents of an Emacs buffer"
     :args (list '(:name "buffer"
                   :type string
                   :description "The name of the buffer whose contents are to be retrieved"))
     :category "emacs")

  ) ;; end of gptel use-package config



;; ----------------------------------------------------------------------------------
;; mcp server
;; ----------------------------------------------------------------------------------

(use-package mcp
  :after gptel
  :custom
  (mcp-hub-servers `(("mcp-nixos" . (
                                      :command "podman" ; <-- Use your container runtime
                                      :args ("run" "--rm" "-i" "ghcr.io/utensils/mcp-nixos")))
                     ("searxng" . ( ; General web search tool
                                    :command "podman"
                                    :args ("run" "-i" "--rm"
                                           "--network=host"
                                            "-e" "SEARXNG_URL=http://localhost:8080"
                                            "mcp-searxng:local")
                                    ))
                     )) ;; closing parentheses

  :config
  (require 'mcp-hub))


;; ----------------------------------------------------------------------------------
;; docker
;; ----------------------------------------------------------------------------------

(use-package docker
  :bind ("C-c d" . docker)
  :custom
  (docker-command "podman"))


;; ----------------------------------------------------------------------------------
;; dockerfile-mode
;; ----------------------------------------------------------------------------------

(use-package dockerfile-mode
  :custom
  (dockerfile-mode-command "podman"))


;; ----------------------------------------------------------------------------------
;; garbage collection
;; ----------------------------------------------------------------------------------

;; Make gc pauses faster by decreasing the threshold.
(setq gc-cons-threshold (* 2 1000 1000))
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages nil))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(org-link ((t (:inherit link :underline nil)))))
#+END_SRC

**** early-init.el

#+NAME: early-init.el
#+begin_src emacs-lisp
;;; early-init.el -*- lexical-binding: t; -*-

;;; Garbage collection
;; Increase the GC threshold for faster startup
;; The default is 800 kilobytes.  Measured in bytes.
(setq gc-cons-threshold (* 50 1000 1000))

;;; UI configuration
;; Remove some unneeded UI elements (the user can turn back on anything they wish)
(setq inhibit-startup-message t)
(push '(tool-bar-lines . 0) default-frame-alist)
(push '(menu-bar-lines . 0) default-frame-alist)
(push '(vertical-scroll-bars) default-frame-alist)

;; general settings
(setq initial-scratch-message nil)

;; Don’t compact font caches during GC.
(setq inhibit-compacting-font-caches t)

;; start the initial frame maximized
(add-to-list 'initial-frame-alist '(fullscreen . maximized))

;; start every frame maximized
(add-to-list 'default-frame-alist '(fullscreen . maximized))

;; no title bar
(add-to-list 'default-frame-alist '(undecorated . t))

;;Tell emacs where is your personal elisp lib dir
(add-to-list 'load-path "~/.config/emacs/lisp/")

;; Make the initial buffer load faster by setting its mode to fundamental-mode
(customize-set-variable 'initial-major-mode 'fundamental-mode)
#+end_src

**** bookmarks config

#+NAME: emacs-bookmarks
#+BEGIN_SRC emacs-lisp
;;;; Emacs Bookmark Format Version 1;;;; -*- coding: utf-8-emacs; mode: lisp-data -*-
;;; This format is meant to be slightly human-readable;
;;; nevertheless, you probably don't want to edit it.
;;; -*- End Of Bookmark File Format Version Stamp -*-
(("dotfiles"
 (filename . "~/git/debian/debian-dotfiles/debian-dotfiles.org")
 (front-context-string . "#TITLE: debian d")
 (rear-context-string)
 (position . 1)
 (last-modified 26662 23848 389578 829000))
("Desktop"
 (filename . "~/Desktop/")
 (front-context-string)
 (rear-context-string . "wilcox/Desktop:\n")
 (position . 27)
 (last-modified 26467 1247 366394 327000))
("video"
 (filename . "~/git/personal/bookmarks/video.org")
 (front-context-string . "* links\n** [[vid")
 (rear-context-string . "ARTUP: overview\n")
 (position . 42)
 (last-modified 26024 3044 81012 2000))
("bookmarks"
 (filename . "~/git/personal/bookmarks/bookmarks.org")
 (front-context-string . "#+STARTUP: overv")
 (rear-context-string)
 (position . 1)
 (last-modified 25703 35089 410375 479000))
("feeds"
 (filename . "~/git/personal/feeds/feeds.org")
 (front-context-string . "* elfeed :elfeed")
 (rear-context-string . "TARTUP: content\n")
 (position . 20)
 (last-modified 25692 54791 894815 365000))
("org-refile-last-stored"
 (filename . "~/git/personal/org/web.org")
 (front-context-string . "** [[https://its")
 (rear-context-string . "lview\" program.\n")
 (position . 173198))
("root"
 (filename . "/")
 (front-context-string . "bin -> usr/bin\n ")
 (rear-context-string . " 7 Oct 30 23:23 ")
 (position . 197))
("home"
 (filename . "~/")
 (front-context-string . "..\n  drwxr-xr-x ")
 (rear-context-string . " 3 Oct 30 23:26 ")
 (position . 178))
("cerberus"
 (filename . "~/git/cerberus/")
 (front-context-string . "7zip\n  drwxr-xr-")
 (rear-context-string . "96 Jan  4  2016 ")
 (position . 249))
)
#+END_SRC

*** emacs tangle
**** init.el

+ home dir

#+NAME: emacs-init.el-home-dir
#+BEGIN_SRC emacs-lisp :noweb yes :tangle "~/.config/emacs/init.el"
<<init.el>>
#+END_SRC

+ current dir

#+NAME: emacs-init.el-current-dir
#+BEGIN_SRC emacs-lisp :noweb yes :tangle ".config/emacs/init.el"
<<init.el>>
#+END_SRC

**** early-init.el

+ home dir

#+NAME: emacs-early-init.el-home-dir
#+BEGIN_SRC emacs-lisp :noweb yes :tangle "~/.config/emacs/early-init.el"
<<early-init.el>>
#+END_SRC

+ current dir

#+NAME: emacs-early-init.el-current-dir
#+BEGIN_SRC emacs-lisp :noweb yes :tangle ".config/emacs/early-init.el"
<<early-init.el>>
#+END_SRC

**** bookmark tangle

+ home dir

#+NAME: emacs-bookmarks-home-dir
#+BEGIN_SRC emacs-lisp :noweb yes :tangle "~/.config/emacs/bookmarks"
<<emacs-bookmarks>>
#+END_SRC

+ current dir

#+NAME: emacs-bookmarks-current-dir
#+BEGIN_SRC emacs-lisp :noweb yes :tangle ".config/emacs/bookmarks"
<<emacs-bookmarks>>
#+END_SRC

** alacritty
*** alacritty config

#+NAME: alacritty
#+BEGIN_SRC toml
[colors.bright]
black = "#000000"
blue = "#79a8ff"
cyan = "#4ae2f0"
green = "#70b900"
magenta = "#f78fe7"
red = "#ff6b55"
white = "#ffffff"
yellow = "#fec43f"

[colors.normal]
black = "#000000"
blue = "#2fafff"
cyan = "#00d3d0"
green = "#44bc44"
magenta = "#feacd0"
red = "#ff5f59"
white = "#989898"
yellow = "#d0bc00"

[colors.primary]
background = "#0D0E1C"
foreground = "#989898"

[env]
TERM = "xterm-256color"

[font]
size = 16.0

[font.bold]
family = "Fira Code"
style = "Bold"

[font.bold_italic]
family = "Fira Code"
style = "Bold Italic"

[font.italic]
family = "Fira Code"
style = "Italic"

[font.normal]
family = "Fira Code"
style = "Regular"

[window]
decorations = "none"
decorations_theme_variant = "Dark"
startup_mode = "Maximized"

[window.class]
general = "Alacritty"
instance = "Alacritty"

[window.padding]
x = 4
y = 4

[mouse]
hide_when_typing = false
#+END_SRC

*** alacritty tangle

+ home dir

#+NAME: alacritty-home-dir
#+BEGIN_SRC toml :noweb yes :tangle "~/.config/alacritty/alacritty.toml"
<<alacritty>>
#+END_SRC

+ current dir

#+NAME: alacritty-current-dir
#+BEGIN_SRC toml :noweb yes :tangle ".config/alacritty/alacritty.toml"
<<alacritty>>
#+END_SRC

** zsh
*** zsh config
**** zshrc

#+NAME: zshrc
#+BEGIN_SRC conf
#===============================================================================
# ~/.zshrc
#===============================================================================

#===============================================================================
# ssh zsh fix
#===============================================================================

[[ $TERM == "dumb" ]] && unsetopt zle && PS1='$ ' && return


#===============================================================================
# Keep 1000 lines of history within the shell and save it to ~/.zsh_history:
#===============================================================================

HISTSIZE=1000


#===============================================================================
# variables for PS3 prompt
#===============================================================================

newline=$'\n'
yesmaster='Yes Master ? '


#===============================================================================
# Source the git-prompt.sh script on Debian
#===============================================================================

source /usr/lib/git-core/git-sh-prompt


#===============================================================================
# export git status options
#===============================================================================

export GIT_PS1_SHOWDIRTYSTATE=true
export GIT_PS1_SHOWSTASHSTATE=true
export GIT_PS1_SHOWUNTRACKEDFILES=true
export GIT_PS1_SHOWUPSTREAM="auto"
export GIT_PS1_SHOWCOLORHINTS=true


#===============================================================================
# PS3 prompt function
#===============================================================================

function zle-line-init zle-keymap-select {
    # 1. Determine the mode string based on Zsh's internal KEYMAP variable
    local MODE_INDICATOR
    case $KEYMAP in
        vicmd)
            MODE_INDICATOR="[n] " # Normal Mode Indicator + a space
            ;;
        viins|main)
            MODE_INDICATOR="[i] " # Insert Mode Indicator + a space
            ;;
        ,*)
            MODE_INDICATOR="" # Fallback
            ;;
    esac

    # 2. Rebuild the PS1, inserting the MODE_INDICATOR on the second line
    PS1="[%n@%M %~]$(__git_ps1 "(%s) ")${newline}${MODE_INDICATOR}${yesmaster}"

    zle reset-prompt
}


#===============================================================================
# run PS3 prompt function
#===============================================================================

zle -N zle-line-init
zle -N zle-keymap-select


#===============================================================================
# set terminal window title to program name
#===============================================================================

case $TERM in
  (*xterm* | rxvt | rxvt-unicode-256color)
    function precmd {
      print -Pn "\e]0;%(1j,%j job%(2j|s|); ,)%~\a"
    }
    function preexec {
      printf "\033]0;%s\a" "$1"
    }
  ;;
esac


#===============================================================================
# Fix bugs when switching modes
#===============================================================================

bindkey -v # vi mode
bindkey "^?" backward-delete-char
bindkey "^u" backward-kill-line
bindkey "^a" beginning-of-line
bindkey "^e" end-of-line
bindkey "^k" kill-line


#===============================================================================
# Use modern completion system
#===============================================================================

autoload -Uz compinit
compinit


#===============================================================================
# Set/unset  shell options
#===============================================================================

setopt notify globdots pushdtohome cdablevars autolist
setopt recexact longlistjobs
setopt autoresume histignoredups pushdsilent noclobber
setopt autopushd pushdminus extendedglob rcquotes mailwarning
setopt histignorealldups sharehistory
#setopt auto_cd
cdpath=($HOME)
unsetopt bgnice autoparamslash


#===============================================================================
# Completion Styles
#===============================================================================

# list of completers to use
zstyle ':completion:*::::' completer _expand _complete _ignored _approximate

# allow one error for every three characters typed in approximate completer
zstyle -e ':completion:*:approximate:*' max-errors \
    'reply=( $(( ($#PREFIX+$#SUFFIX)/3 )) numeric )'
    
# insert all expansions for expand completer
zstyle ':completion:*:expand:*' tag-order all-expansions

# formatting and messages
zstyle ':completion:*' verbose yes
zstyle ':completion:*:descriptions' format '%B%d%b'
zstyle ':completion:*:messages' format '%d'
zstyle ':completion:*:warnings' format 'No matches for: %d'
zstyle ':completion:*:corrections' format '%B%d (errors: %e)%b'
zstyle ':completion:*' group-name ''

#eval "$(dircolors -b)"
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' list-colors ''

# match uppercase from lowercase
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

# offer indexes before parameters in subscripts
zstyle ':completion:*:*:-subscript-:*' tag-order indexes parameters

# Filename suffixes to ignore during completion (except after rm command)
zstyle ':completion:*:*:(^rm):*:*files' ignored-patterns '*?.o' '*?.c~' \
    '*?.old' '*?.pro' '.hidden'

# ignore completion functions (until the _ignored completer)
zstyle ':completion:*:functions' ignored-patterns '_*'

# kill - red, green, blue
zstyle ':completion:*:*:kill:*' list-colors '=(#b) #([0-9]#)*( *[a-z])*=22=31=34'

# list optiones colour, white + cyan
zstyle ':completion:*:options' list-colors '=(#b) #(-[a-zA-Z0-9,]#)*(-- *)=36=37'

# zsh autocompletion for sudo and doas
zstyle ":completion:*:(sudo|su|doas):*" command-path /usr/local/bin /home/djwilcox/bin

# rehash commands
zstyle ':completion:*' rehash true


#===============================================================================
# highlighting
#===============================================================================

source /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
ZSH_HIGHLIGHT_STYLES[suffix-alias]=fg=cyan,underline
ZSH_HIGHLIGHT_STYLES[precommand]=fg=cyan,underline
ZSH_HIGHLIGHT_STYLES[arg0]=fg=cyan
ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets pattern)
ZSH_HIGHLIGHT_PATTERNS=('rm -rf *' 'fg=white,bold,bg=red')


#===============================================================================
# vpn-route
#===============================================================================

_vpn-route() {
  local curcontext="$curcontext" state line
  typeset -A opt_args

  _arguments -s \
    '-c[OpenVPN configuration file]:config file:_files -g "*.ovpn"' \
    '-a[Authentication file]:auth file:_files -g "*.txt"' \
    '-h[Show help]'
}

compdef _vpn-route vpn-route


#===============================================================================
# transmission autocomplete
#===============================================================================

compdef _gnu_generic transmission-daemon
compdef _gnu_generic transmission-remote
compdef _gnu_generic transmission-show
compdef _gnu_generic transmission-cli
compdef _gnu_generic transmission-create
compdef _gnu_generic transmission-edit
compdef _gnu_generic transmission-pwgen


#===============================================================================
# aliases
#===============================================================================

# mpc host and socket
alias mpc='mpc --host="${HOME}/.config/mpd/socket"'
#+END_SRC

**** zshenv

#+NAME: zshenv
#+begin_src conf
#===============================================================================
# ~/.zshenv
#===============================================================================

#===============================================================================
# Path
#===============================================================================

typeset -U PATH path
path=("$HOME/bin" "/usr/bin" "$path[@]")
export PATH


#===============================================================================
# xdg directories
#===============================================================================

export XDG_CONFIG_HOME="$HOME/.config"
export XDG_CACHE_HOME="$HOME/.cache"
export XDG_DATA_HOME="$HOME/.local/share"


#===============================================================================
# ssh-add
#===============================================================================

export SSH_AUTH_SOCK="$XDG_RUNTIME_DIR/ssh-agent.socket"


#===============================================================================
# less
#===============================================================================

export LESSHISTFILE="${XDG_CONFIG_HOME}/less/history"
export LESSKEY="${XDG_CONFIG_HOME}/less/keys"


#===============================================================================
# wget
#===============================================================================

export WGETRC="$XDG_CONFIG_HOME/wget/wgetrc"


#===============================================================================
# libdvdcss
#===============================================================================

export DVDCSS_CACHE="${XDG_DATA_HOME}/dvdcss"


#===============================================================================
# set emacsclient as editor
#===============================================================================

export ALTERNATE_EDITOR=""
export EDITOR="emacsclient -a emacs"
export VISUAL="emacsclient -a emacs"


#===============================================================================
# tell ls to be colourfull
#===============================================================================

export LSCOLORS=ExFxCxDxBxegedabagacad
export CLICOLOR=1


#===============================================================================
# qt5
#===============================================================================

export QT_QPA_PLATFORMTHEME=qt5ct


#===============================================================================
# vi mode
#===============================================================================

export KEYTIMEOUT=1


#===============================================================================
# mpd host variable for mpc
#===============================================================================

export MPD_HOST="/home/djwilcox/.config/mpd/socket"


#===============================================================================
# gnome keyring
#===============================================================================

eval $(/usr/bin/gnome-keyring-daemon --start --components=gpg,pkcs11,secrets,ssh)
#+end_src

*** zsh tangle
**** zshrc tangle

+ home dir

#+NAME: zshrc-home-dir
#+BEGIN_SRC conf :noweb yes :tangle "~/.zshrc"
<<zshrc>>
#+END_SRC

+ current dir

#+NAME: zshrc-current-dir
#+BEGIN_SRC conf :noweb yes :tangle ".zshrc"
<<zshrc>>
#+END_SRC

**** zshenv tangle

+ home dir

#+NAME: zshenv-home-dir
#+BEGIN_SRC conf :noweb yes :tangle "~/.zshenv"
<<zshenv>>
#+END_SRC

+ current dir

#+NAME: zshenv-current-dir
#+BEGIN_SRC conf :noweb yes :tangle ".zshenv"
<<zshenv>>
#+END_SRC

** tmux
*** tmux config

#+NAME: tmux
#+BEGIN_SRC conf
# .tmux.conf

# vi mode
set-window-option -g mode-keys vi

# Some tweaks to the status line
#set -g status-right "%H:%M" # date and time
set -g status-right "" # date and time
set -g status-right-style fg=color245

# If running inside tmux ($TMUX is set), then change the status line to red
%if #{TMUX}
set -g status-bg red
%endif

# Enable RGB colour if running in xterm(1)
set-option -sa terminal-overrides ",xterm*:Tc"

# Change the default $TERM to screen
set -g default-terminal "xterm-256color"

# No bells at all
set -g bell-action none

# close panes after command has finished
set -g remain-on-exit off

# Change the prefix key to C-a
set -g prefix C-a
unbind C-b
bind C-a send-prefix

# Turn the mouse on, but without copy mode dragging
set -g mouse on

# multiple places
bind F set -w window-size

# Keys to toggle monitoring activity in a window and the synchronize-panes option
bind m set monitor-activity
bind y set synchronize-panes\; display 'synchronize-panes #{?synchronize-panes,on,off}'

# Start windows and panes at 1, not 0
set -g base-index 1
setw -g pane-base-index 1

# reload ~/.tmux.conf using PREFIX r
bind r source-file ~/.config/tmux/tmux.conf \; display "Reloaded!"

# default statusbar colors
set -g status-style bg=default,fg=yellow #yellow

# default window title colors
set -g window-status-style fg=brightblue,bg=default

# active window title colors
set -g window-status-current-style fg=black,bg=blue

# pane border
set -g pane-border-style fg=black #base02
set -g pane-active-border-style fg=black #base01

# message text
set -g message-style bg=black,fg=brightred #orange

# pane number display
set-option -g display-panes-active-colour blue #blue
set-option -g display-panes-colour brightred #orange

# clock
set-window-option -g clock-mode-colour green #green

# vim key bindings
setw -g mode-keys vi
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R
bind-key -r C-h select-window -t :-
bind-key -r C-l select-window -t :+

# resize panes using PREFIX H, J, K, L
bind H resize-pane -L 5
bind J resize-pane -D 5
bind K resize-pane -U 5
bind L resize-pane -R 5

# copy and paste
set-window-option -g automatic-rename on

# toggle statusbar
bind-key s set -g status

# copying selection vim style
# requires xsel and xclip
bind-key Escape copy-mode			# enter copy mode; default [
bind-key p paste-buffer				# paste; (default hotkey: ] )
bind-key P choose-buffer 			# tmux clipboard history
bind-key + delete-buffer \; display-message "Deleted current Tmux Clipboard History"

# Send To Tmux Clipboard or System Clipboard
bind-key < run-shell "tmux set-buffer -- \"$(xsel -o -b)\"" \; display-message "Copy To Tmux Clipboard"
bind-key > run-shell 'tmux show-buffer | xsel -i -b' \; display-message "Copy To System Clipboard"

# Note: rectangle-toggle (aka Visual Block Mode) > hit v then C-v to trigger it
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi V send-keys -X select-line
bind-key -T copy-mode-vi C-v send-keys -X rectangle-toggle
bind-key -T choice-mode-vi h send-keys -X tree-collapse
bind-key -T choice-mode-vi l send-keys -X tree-expand
bind-key -T choice-mode-vi H send-keys -X tree-collapse-all
bind-key -T choice-mode-vi L send-keys -X tree-expand-all
bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe "xclip -in -selection clipboard"
bind-key -T copy-mode-vi y send-keys -X copy-pipe "xclip -in -selection clipboard"

# urlscan as context and url view
bind-key u capture-pane \; save-buffer /tmp/tmux-buffer \; \
new-window -n "urlscan" '$SHELL -c "urlscan < /tmp/tmux-buffer"'

# copy mode - emulate right click "search google for {text}" like you do in GUI web browsers. 
bind-key -T copy-mode-vi 'o' send-keys -X copy-selection \; \
new-window -n google \; send-keys -t google 'sr -browser=w3m google "$(tmux show-buffer)" && tmux kill-window' 'Enter'

# tmux auto rename pane 
set-option -g status-interval 1
set-option -g automatic-rename on
set-option -g automatic-rename-format "#{?#{==:#{pane_current_command},zsh},#{b:pane_current_path},#{pane_current_command}}"
#+END_SRC

*** tmux tangle

+ home dir

#+NAME: tmux-home-dir
#+BEGIN_SRC conf :noweb yes :tangle "~/.config/tmux/tmux.conf"
<<tmux>>
#+END_SRC

+ current dir

#+NAME: tmux-current-dir
#+BEGIN_SRC conf :noweb yes :tangle ".config/tmux/tmux.conf"
<<tmux>>
#+END_SRC

** mpv
*** mpv config
**** input.conf

#+NAME: input.conf
#+BEGIN_SRC conf
# vim keybindings
l seek  5
h seek -5
k seek  60
j seek -60

# subtitles
J cycle sub 
K cycle sub down

# Audio filters:
F1 show-text "F2: loudnorm | F3: dynaudnorm | F4: low Bass | F5: low Treble" 2000

# loudnorm:
F2 af toggle lavfi=[loudnorm=I=-16:TP=-3:LRA=4]

# dynaudnorm:
F3 af toggle lavfi=[dynaudnorm=g=5:f=250:r=0.9:p=0.5]

# lowered bass:
F4  af toggle "superequalizer=6b=2:7b=2:8b=2:9b=2:10b=2:11b=2:12b=2:13b=2:14b=2:15b=2:16b=2:17b=2:18b=2"

# lowered treble:
F5  af toggle "superequalizer=1b=2:2b=2:3b=2:4b=2:5b=2:6b=2:7b=2:8b=2:9b=2:10b=2:11b=2:12b=2"
#+END_SRC

**** mpv.conf

#+NAME: mpv.conf
#+BEGIN_SRC conf
# mpv.conf

# list profiles with: mpv --profile=help

# load hwdec profile automatically
profile=hwdec 

# hardware acceleration profile
[hwdec]
profile-desc="hardware acceleration, no cache, yt-dlp 1080 or less"
#vo=gpu
#hwdec=vaapi

# hide: GNOME's wayland compositor lacks support for the idle inhibit protocol. 
#msg-level=ffmpeg=fatal,vo/gpu/wayland=no
msg-level=ffmpeg=fatal

# cache no for internet streams
cache=no

# yt-dlp best format 1080 or less
ytdl-format="bestvideo[height<=?1080]+bestaudio/best"

# show milliseconds in the on screen display
osd-fractions

# alsa pipewire audio device
audio-device=alsa/pipewire

# youtube subs - J to switch to subs
sub-auto=fuzzy
ytdl-raw-options=sub-lang="en",write-sub=,write-auto-sub=
sub-font='Noto Color Emoji'

# screenshot timecode
screenshot-template="%F-[%P]v%#01n"


# cache profile: mpv --profile=cache
[cache]
profile-desc="hardware acceleration, cache, yt-dlp 1080 or less"
# include hwdec profile 
profile=hwdec
# override hwdec profile cache setting
cache=auto


# youtube conditional auto profile match any youtube url
[youtube]
profile-desc="youtube hardware acceleration, cache"
profile-cond=path:find('youtu%.?be') ~= nil
# include hwdec profile 
profile=hwdec
# override hwdec profile cache setting
cache=yes

# archive.org conditional auto profile match any archive.org url
[archive]
profile-desc="archive hardware acceleration, cache"
profile-cond=path:find('archive.org') ~= nil
# include hwdec profile 
profile=hwdec
# override hwdec profile cache setting
cache=auto

# bbc iplayer conditional auto profile match any bbc iplayer url
[iplayer]
profile-desc="archive hardware acceleration, cache"
profile-cond=path:find('bbc.co.uk/iplayer') ~= nil
# include hwdec profile 
profile=hwdec
# override hwdec profile cache setting
cache=no

# bbc iplayer conditional auto profile match any bbc iplayer url
[bbc]
profile-desc="bbc hardware acceleration, cache"
profile-cond=path:find('bbc:pips:service') ~= nil
# include hwdec profile 
profile=hwdec
# override hwdec profile cache setting
cache=no
#+END_SRC

*** mpv tangle
**** input.conf tangle

+ home dir

#+NAME: input.conf-home-dir
#+BEGIN_SRC conf :noweb yes :tangle "~/.config/mpv/input.conf"
<<input.conf>>
#+END_SRC

+ current dir

#+NAME: input.conf-current-dir
#+BEGIN_SRC conf :noweb yes :tangle ".config/mpv/input.conf"
<<input.conf>>
#+END_SRC

**** mpv.conf tangle

+ home dir

#+NAME: mpv.conf-home-dir
#+BEGIN_SRC conf :noweb yes :tangle "~/.config/mpv/mpv.conf"
<<mpv.conf>>
#+END_SRC

+ current dir

#+NAME: mpv.conf-current-dir
#+BEGIN_SRC conf :noweb yes :tangle ".config/mpv/mpv.conf"
<<mpv.conf>>
#+END_SRC

** yt-dlp
*** yt-dlp config

#+NAME: yt-dlp
#+BEGIN_SRC conf
# download 1080p video in mp4 format
#-f 'bestvideo[height<=1080][vcodec!=?vp9]+bestaudio[acodec!=?opus]'

# external downloader aria2
#--downloader aria2c --downloader-args aria2c:'-c -j 3 -x 3 -s 3 -k 1M'

# native downloader for dash and m3u8
--downloader 'dash,m3u8:native'

# restrict filenames
--restrict-filenames

# merge output format mkv
--merge-output-format mkv

# ouput template
-o '%(title)s-[%(id)s]-%(upload_date>%Y-%m-%d)s.%(ext)s'
#+END_SRC

*** yt-dlp tangle

+ home dir

#+NAME: yt-dlp-home-dir
#+BEGIN_SRC conf :noweb yes :tangle "~/.config/yt-dlp/config"
<<yt-dlp>>
#+END_SRC

+ current dir

#+NAME: yt-dlp-current-dir
#+BEGIN_SRC conf :noweb yes :tangle ".config/yt-dlp/config"
<<yt-dlp>>
#+END_SRC

** podman
*** registries.conf
**** registries.conf config

#+NAME: podman-registries.conf
#+begin_src conf
[registries.search]
registries = ['docker.io', 'quay.io']
#+end_src

**** registries.conf tangle

+ home dir

#+NAME: podman-registries.conf-home-dir
#+BEGIN_SRC conf :noweb yes :tangle "~/.config/containers/registries.conf"
<<podman-registries.conf>>
#+END_SRC
  
+ current dir

#+NAME: podman-registries.conf-current-dir
#+BEGIN_SRC conf :noweb yes :tangle ".config/containers/registries.conf"
<<podman-registries.conf>>
#+END_SRC

*** crawl4ai
**** crawl4ai set up

[[https://github.com/NapoleonWils0n/cerberus/blob/master/crawl4ai/crawl4ai-podman.org]]

create the crawl4ai-podman directory

#+begin_src sh
mkdir -p ~/podman/crawl4ai-podman
#+end_src

change into the crawl4ai-podman directory

#+begin_src sh
cd ~/podman/crawl4ai-podman
#+end_src

clone the crawl4ai git repo

#+begin_src sh
git clone https://github.com/unclecode/crawl4ai.git
#+end_src

run the setup-crawl4ai script to create the output_data directory

#+begin_src sh
./setup-crawl4ai
#+end_src

***** start crawl4ai

#+begin_src sh
podman-compose up -d
#+end_src

***** stop crawl4ai

#+begin_src sh 
podman-compose down
#+end_src

**** crawl4ai config
***** docker-compose.yml

#+NAME: crawl4ai-docker-compose.yml
#+begin_src yaml
version: '3.8'

# Shared configuration for all environments
x-base-config: &base-config
  ports:
    - "11235:11235"  # Gunicorn port
  env_file:
    - .llm.env       # API keys (create from .llm.env.example)
  environment:
    - OPENAI_API_KEY=${OPENAI_API_KEY:-}
    - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY:-}
    - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
    - GROQ_API_KEY=${GROQ_API_KEY:-}
    - TOGETHER_API_KEY=${TOGETHER_API_KEY:-}
    - MISTRAL_API_KEY=${MISTRAL_API_KEY:-}
    - GEMINI_API_TOKEN=${GEMINI_API_TOKEN:-}
    - LLM_PROVIDER=${LLM_PROVIDER:-}  # Optional: Override default provider (e.g., "anthropic/claude-3-opus")
  volumes:
    - /dev/shm:/dev/shm  # Chromium performance
    - ./output_data:/app/output # output_data directory
    - ./scripts:/home/appuser/bin # Map local 'scripts' directory to '~/bin' inside the container
  deploy:
    resources:
      limits:
        memory: 4G
      reservations:
        memory: 1G
  restart: unless-stopped
  healthcheck:
    test: ["CMD", "curl", "-f", "http://localhost:11235/health"]
    interval: 30s
    timeout: 10s
    retries: 3
    start_period: 40s
  user: "appuser"

services:
  crawl4ai:
    # 1. Default: Pull multi-platform test image from Docker Hub
    # 2. Override with local image via: IMAGE=local-test docker compose up
    #image: ${IMAGE:-unclecode/crawl4ai:${TAG:-latest}}
    image: unclecode/crawl4ai:latest
    
    # Local build config (used with --build)
    build:
      context: ./crawl4ai  # <--- MODIFIED TO POINT TO THE SUBDIRECTORY
      dockerfile: Dockerfile
      args:
        INSTALL_TYPE: ${INSTALL_TYPE:-default}
        ENABLE_GPU: ${ENABLE_GPU:-false}
    
    # Inherit shared config
    <<: *base-config
#+end_src

***** setup-crawl4ai

#+NAME: setup-crawl4ai
#+begin_src sh
#!/bin/sh

# === Configuration ===
# Define the base directory of your crawl4ai-podman setup
CRAWL4AI_BASE_DIR="$HOME/podman/crawl4ai-podman"
CRAWL4AI_DATA_DIR="$CRAWL4AI_BASE_DIR/output_data"
CRAWL4AI_SCRIPTS_DIR="$CRAWL4AI_BASE_DIR/scripts"

# === Setup Steps ===

# 1. Create the data and scripts directories
echo "Creating data directory: $CRAWL4AI_DATA_DIR"
mkdir -p "$CRAWL4AI_DATA_DIR"
mkdir -p "$CRAWL4AI_SCRIPTS_DIR"

# 2. Set initial permissive permissions (777 is often required for podman/docker on first setup)
echo "Setting initial directory permissions to 777..."
chmod 777 "$CRAWL4AI_DATA_DIR"
chmod 777 "$CRAWL4AI_SCRIPTS_DIR"

# 3. Change ownership using podman unshare
# This is crucial for fixing UID/GID mapping issues. 
# We'll assume the container's 'appuser' belongs to a group that you want to grant access to, 
# typically your primary user group or a specific group like 'users' or 'nogroup'.
echo "Changing ownership (group to 'users') using podman unshare..."
# Replace 'users' with the group that works for your Podman configuration if necessary.
podman unshare chown -R :users "$CRAWL4AI_DATA_DIR"
podman unshare chown -R :users "$CRAWL4AI_SCRIPTS_DIR"

# 4. Set default ACL for future files
# This ensures any new files created by the host or the container inherit group-write permission.
echo "Setting default ACL for new files to be group-editable..."
podman unshare setfacl -d -m g::rwx "$CRAWL4AI_DATA_DIR"
podman unshare chgrp -R 999 "$CRAWL4AI_SCRIPTS_DIR"
echo "Crawl4AI data directory setup complete!"
#+end_src

***** scripts
****** screenshot.py

#+NAME: crawl4ai-screenshot.py
#+begin_src python
import os
import sys
import asyncio
import argparse
from urllib.parse import urlparse
from base64 import b64decode
from crawl4ai import AsyncWebCrawler, CrawlerRunConfig, CacheMode, BrowserConfig

# Define the absolute output directory inside the container
OUTPUT_DIR = "/app/output"

# Adjust paths as needed (Existing boilerplate, left as is)
parent_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(parent_dir)

def get_filename_from_url(url: str) -> str:
    """
    Extracts the last path segment of a URL, cleans it, and uses it as a filename base.
    Removes trailing slashes, any extensions, and query parameters.
    """
    try:
        # Parse the URL to get the path component
        parsed_url = urlparse(url)
        path = parsed_url.path
        
        # Strip trailing slash to correctly identify the filename segment
        path_cleaned = path.rstrip('/')
        
        if not path_cleaned or path_cleaned == '/':
            # Use the domain name if path is root or empty
            # Simple sanitization for domain to ensure it's a valid filename
            filename = parsed_url.netloc.replace('www.', '').replace('.', '_').replace('-', '_')
        else:
            # Use os.path.basename on the cleaned path to get the last path segment
            filename = os.path.basename(path_cleaned)

        # Simple sanitization: remove query parameters or fragments if present
        filename = filename.split('?')[0].split('#')[0]

        # Remove any extension by keeping only the part before the first dot ('.').
        if '.' in filename:
            filename = filename.split('.', 1)[0]

        # Use a sensible default if the result is empty
        if not filename:
            return "index" 

        return filename

    except Exception:
        # Fallback in case of parsing error
        return "default_page_output"


# --- Argument Parsing Setup ---
def parse_args():
    """Parses command-line arguments for the crawling script."""
    parser = argparse.ArgumentParser(
        description="A Crawl4AI script for crawling pages with control over timeout, wait conditions, and rendering delay."
    )
    parser.add_argument(
        "-u", "--url",
        type=str,
        required=True,
        help="The URL to crawl (required)."
    )
    parser.add_argument(
        "--page-timeout",
        type=int,
        default=30000,  # Default is 30000ms (30 seconds)
        help="The maximum time (in milliseconds) to wait for the entire page operation. Default is 30000."
    )
    parser.add_argument(
        "--wait_until",
        type=str,
        default='load', # Set default to 'load' for quick completion on simple pages
        help="The desired Playwright page load state (e.g., 'load', 'networkidle'). Used implicitly to determine when the page is ready before applying the delay."
    )
    parser.add_argument(
        "--delay_after_wait",
        type=int,
        default=2000, # Default to 2000ms (2 seconds)
        help="A delay (in milliseconds) to wait after the page is ready before taking the screenshot. Default is 2000."
    )
    return parser.parse_args()

# --- Crawling Logic (Renamed to main for consistency) ---
async def main(url: str, page_timeout: int, wait_until: str | None, filename_base: str, delay_after_wait: int):
    """
    Initializes Crawl4AI, runs the crawl, and saves the output files.
    """
    print(f"--- Starting Crawl ---")
    print(f"URL: {url}")
    print(f"Page Timeout (ms): {page_timeout}")
    print(f"Wait Condition (Page Load State): {wait_until} (Used implicitly)")
    print(f"Delay After Wait (ms): {delay_after_wait} (Applied via JavaScript wait_for)")
    print(f"Output files will use base name: {filename_base}")
    
    # 1. Define browser configuration
    browser_config = BrowserConfig(
        headless=True,
        verbose=False
    )
    
    # 2. Define the per-run configuration
    # Workaround: Combining page load state and post-load delay using a 'js:' prefixed function in 'wait_for'.
    # NOTE: The 'js:' prefix is CRITICAL to tell Crawl4AI to execute the code instead of looking for it as a selector.
    js_delay_wait = f"""js:async () => {{
        // 1. Wait for the page to reach the desired state (e.g., 'networkidle').
        await new Promise(r => document.readyState === 'complete' ? r() : window.addEventListener('load', r));
        
        // 2. Introduce the user-requested delay for lazy-loading/rendering
        await new Promise(resolve => setTimeout(resolve, {delay_after_wait}));
        
        // Signal completion
        return true;
    }}
    """
    
    # PDF generation has been disabled per user request.
    run_config = CrawlerRunConfig(
        cache_mode=CacheMode.BYPASS, 
        page_timeout=page_timeout,
        
        # Use 'wait_for' to execute the combined load/delay logic (Addresses lazy loading)
        wait_for=js_delay_wait, 
        
        pdf=False, # <-- PDF generation disabled
        screenshot=True, 
        
        # Add lazy-loading/rendering parameters
        wait_for_images=True,
        scan_full_page=True,
    )
    
    try:
        # 3. Execute the crawler
        async with AsyncWebCrawler(config=browser_config) as crawler:
            result = await crawler.arun(
                url=url,
                config=run_config
            )

        # 4. Report and Save results
        if result.success:
            # Ensure the output directory exists before saving
            os.makedirs(OUTPUT_DIR, exist_ok=True)

            screenshot_path = os.path.join(OUTPUT_DIR, f"{filename_base}.png")
            
            # Save screenshot (Requires base64 decoding)
            if result.screenshot:
                with open(screenshot_path, "wb") as f:
                    f.write(b64decode(result.screenshot))
                print(f"Screenshot saved to: {screenshot_path}")
            
            print(f"\n✅ Crawl Successful (Status: {result.status_code})")
            
        else:
            print(f"\n❌ Crawl Failed: {result.error_message}")
            if result.error_message and "timeout" in result.error_message.lower():
                print(f"Tip: The crawl exceeded the maximum time limit of {page_timeout / 1000} seconds. Try increasing the --page-timeout value.")
            
    except Exception as e:
        print(f"\nAn unexpected error occurred during crawling: {e}", file=sys.stderr)

# --- Main Execution ---
if __name__ == "__main__":
    args = parse_args()
    
    # Extract filename from the provided URL
    base_filename = get_filename_from_url(args.url)
    
    try:
        # Run the main asynchronous function with all arguments
        asyncio.run(main(args.url, args.page_timeout, args.wait_until, base_filename, args.delay_after_wait))
    except KeyboardInterrupt:
        print("\nCrawl stopped by user.")
    except Exception as e:
        print(f"An unexpected error occurred: {e}", file=sys.stderr)

#+end_src

***** .llm.env

#+NAME: crawl4ai-llm.env
#+begin_src sh
# LLM Provider Keys
#OPENAI_API_KEY=your_openai_key_here
#DEEPSEEK_API_KEY=your_deepseek_key_here
#ANTHROPIC_API_KEY=your_anthropic_key_here
#GROQ_API_KEY=your_groq_key_here
#TOGETHER_API_KEY=your_together_key_here
#MISTRAL_API_KEY=your_mistral_key_here
GEMINI_API_TOKEN=your_gemini_key_here

# Optional: Override the default LLM provider
# Examples: "openai/gpt-4", "anthropic/claude-3-opus", "deepseek/chat", etc.
# If not set, uses the provider specified in config.yml (default: openai/gpt-4o-mini)
# LLM_PROVIDER=anthropic/claude-3-opus
LLM_PROVIDER=google/gemini-2.5-flash
#+end_src

**** crawl4ai tangle
***** docker-compose.yml

+ home dir

#+NAME: crawl4ai-docker-compose.yml-home-dir
#+BEGIN_SRC yaml :noweb yes :tangle "~/podman/crawl4ai-podman/docker-compose.yml"
<<crawl4ai-docker-compose.yml>>
#+END_SRC
  
+ current dir

#+NAME: crawl4ai-docker-compose.yaml-current-dir
#+BEGIN_SRC yaml :noweb yes :tangle "podman/crawl4ai-podman/docker-compose.yml"
<<crawl4ai-docker-compose.yml>>
#+END_SRC

***** setup-crawl4ai

+ home dir

#+NAME: setup-crawl4ai-home-dir
#+BEGIN_SRC sh :noweb yes :tangle "~/podman/crawl4ai-podman/setup-crawl4ai" :tangle-mode (identity #o755)
<<setup-crawl4ai>>
#+END_SRC
  
+ current dir

#+NAME: setup-crawl4ai-current-dir
#+BEGIN_SRC sh :noweb yes :tangle "podman/crawl4ai-podman/setup-crawl4ai" :tangle-mode (identity #o755)
<<setup-crawl4ai>>
#+END_SRC

***** scripts
****** screenshot

+ home dir

#+NAME: crawl4ai-screenshot.py-home-dir
#+BEGIN_SRC python :noweb yes :tangle "~/podman/crawl4ai-podman/scripts/screenshot.py"
<<crawl4ai-screenshot.py>>
#+END_SRC
  
+ current dir

#+NAME: crawl4ai-screenshot.py-current-dir
#+BEGIN_SRC sh :noweb yes :tangle "podman/crawl4ai-podman/scripts/screenshot.py"
<<crawl4ai-screenshot.py>>
#+END_SRC

***** .llm.env

+ current dir

#+NAME: crawl4ai-llm.env-current-dir
#+BEGIN_SRC sh :noweb yes :tangle "podman/crawl4ai-podman/.llm.env"
<<crawl4ai-llm.env>>
#+END_SRC

*** invidious
**** invidious set up
***** clone the git repo

create the invidious-podman directory

#+begin_src sh
mkdir -p invidious-podman
#+end_src

change into the invidious-podman directory

#+begin_src sh
cd invidious-podman
#+end_src

clone the invidious git repo

#+begin_src sh
git clone https://github.com/iv-org/invidious.git
#+end_src

***** create passwords

create the password for the

INVIDIOUS_COMPANION_KEY

#+begin_src sh
pwgen 16 1
#+end_src

create the password for the

INVIDIOUS_HMAC_KEY

#+begin_src sh
pwgen 16 1
#+end_src

edit the compose.yaml

replace INVIDIOUS_COMPANION_KEY with password you created

#+begin_src yaml
invidious_companion_key: INVIDIOUS_COMPANION_KEY
#+end_src

replace INVIDIOUS_HMAC_KEY with password you created

#+begin_src yaml
hmac_key: INVIDIOUS_HMAC_KEY
#+end_src

replace INVIDIOUS_COMPANION_KEY with password you created

#+begin_src yaml
SERVER_SECRET_KEY=INVIDIOUS_COMPANION_KEY
#+end_src

***** start invidious

change directory into the invidious-podman directory

and run podman-compose up -d

#+begin_src sh
podman-compose up -d
#+end_src

***** stop invidious

change directory into the invidious-podman directory

and run podman-compose down

#+begin_src sh 
podman-compose down
#+end_src

**** invidious config
***** compose.yaml

#+NAME: invidious-compose.yaml
#+begin_src yaml
version: "3"
services:

  invidious:
    image: quay.io/invidious/invidious:latest
    # image: quay.io/invidious/invidious:latest-arm64 # ARM64/AArch64 devices
    restart: unless-stopped
    # Remove "127.0.0.1:" if used from an external IP
    ports:
      - "127.0.0.1:3000:3000"
    environment:
      # Please read the following file for a comprehensive list of all available
      # configuration options and their associated syntax:
      # https://github.com/iv-org/invidious/blob/master/config/config.example.yml
      INVIDIOUS_CONFIG: |
        db:
          dbname: invidious
          user: kemal
          password: kemal
          host: invidious-db
          port: 5432
        check_tables: true
        invidious_companion:
        # URL used for the internal communication between invidious and invidious companion
        # There is no need to change that except if Invidious companion does not run on the same docker compose file.
        - private_url: "http://companion:8282/companion"
        # IT is NOT recommended to use the same key as HMAC KEY. Generate a new key!
        # Use the key generated in the 2nd step
        invidious_companion_key: INVIDIOUS_COMPANION_KEY
        # external_port:
        # domain:
        # https_only: false
        # statistics_enabled: false
        # Use the key generated in the 2nd step
        hmac_key: INVIDIOUS_HMAC_KEY
    healthcheck:
      test: wget -nv --tries=1 --spider http://127.0.0.1:3000/api/v1/trending || exit 1
      interval: 30s
      timeout: 5s
      retries: 2
    logging:
      options:
        max-size: "1G"
        max-file: "4"
    depends_on:
      - invidious-db

  companion:
    image: quay.io/invidious/invidious-companion:latest
    environment:
    # Use the key generated in the 2nd step
       SERVER_SECRET_KEY=INVIDIOUS_COMPANION_KEY
    restart: unless-stopped
    # Uncomment only if you have configured "public_url" for Invidious companion
    # Or if you want to use Invidious companion as an API in your program.
    # Remove "127.0.0.1:" if used from an external IP
    #ports:
    #  - "127.0.0.1:8282:8282"
    logging:
      options:
        max-size: "1G"
        max-file: "4"
    cap_drop:
      - ALL
    read_only: true
    # cache for youtube library
    volumes:
      - companioncache:/var/tmp/youtubei.js:rw
    security_opt:
      - no-new-privileges:true

  invidious-db:
    image: docker.io/library/postgres:14
    restart: unless-stopped
    volumes:
      - postgresdata:/var/lib/postgresql/data
      - ./invidious/config/sql:/config/sql
      - ./invidious/docker/init-invidious-db.sh:/docker-entrypoint-initdb.d/init-invidious-db.sh
    environment:
      POSTGRES_DB: invidious
      POSTGRES_USER: kemal
      POSTGRES_PASSWORD: kemal
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]

volumes:
  postgresdata:
  companioncache:
#+end_src

**** invidious tangle
***** compose.yaml

+ current dir

#+NAME: invidious-compose.yaml-current-dir
#+BEGIN_SRC yaml :noweb yes :tangle "podman/invidious-podman/compose.yaml"
<<invidious-compose.yaml>>
#+END_SRC

*** n8n
**** n8n set up

[[https://github.com/NapoleonWils0n/cerberus/blob/master/n8n/n8n-podman.org]]

***** start n8n

change directory into the n8n directory

#+begin_src sh
podman-compose up -d
#+end_src

***** stop n8n

change directory into the n8n directory

and run podman-compose down

#+begin_src sh 
podman-compose down
#+end_src

**** n8n config
***** docker-compose.yml

#+NAME: n8n-docker-compose.yml
#+begin_src yaml
version: '3.8'

volumes:
  db_storage:
  n8n_storage:

services:
  postgres:
    image: postgres:16
    restart: always
    env_file: .env
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
      - POSTGRES_NON_ROOT_USER
      - POSTGRES_NON_ROOT_PASSWORD
    volumes:
      - db_storage:/var/lib/postgresql/data
      - ./init-data.sh:/docker-entrypoint-initdb.d/init-data.sh
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 10

  n8n:
    image: docker.n8n.io/n8nio/n8n
    restart: always
    # run id on the command line to check your uid and gid
    # and change user: "1000:100" below to match if needed
    user: "1000:100"
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
      - DB_POSTGRESDB_USER=${POSTGRES_NON_ROOT_USER}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_NON_ROOT_PASSWORD}
      - WEBHOOK_URL=http://localhost:5678/      
      - N8N_EDITOR_BASE_URL=http://localhost:5678/ 
    ports:
      - 5678:5678
    links:
      - postgres
    volumes:
      - n8n_storage:/home/node/.n8n
      - ./data:/mnt/data
    depends_on:
      postgres:
        # FIX: Changed to the more lenient condition to prevent hanging
        condition: service_started
#+end_src

***** init-data.sh

#+NAME: n8n-init-data.sh
#+begin_src bash
#!/bin/bash
set -e;


if [ -n "${POSTGRES_NON_ROOT_USER:-}" ] && [ -n "${POSTGRES_NON_ROOT_PASSWORD:-}" ]; then
	psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" <<-EOSQL
		CREATE USER ${POSTGRES_NON_ROOT_USER} WITH PASSWORD '${POSTGRES_NON_ROOT_PASSWORD}';
		GRANT ALL PRIVILEGES ON DATABASE ${POSTGRES_DB} TO ${POSTGRES_NON_ROOT_USER};
		GRANT CREATE ON SCHEMA public TO ${POSTGRES_NON_ROOT_USER};
	EOSQL
else
	echo "SETUP INFO: No Environment variables given!"
fi
#+end_src

***** .env

#+NAME: n8n-env
#+begin_src sh
POSTGRES_USER=changeUser
POSTGRES_PASSWORD=changePassword
POSTGRES_DB=n8n

POSTGRES_NON_ROOT_USER=changeUser
POSTGRES_NON_ROOT_PASSWORD=changePassword

PODMAN_USERNS=keep-id
#+end_src

***** setup-n8n

#+NAME: setup-n8n
#+begin_src sh
#!/bin/sh

# setup-n8n

#=============================================
# create data directory to store files for n8n
#=============================================

# data directory
N8N_BASE_DIR="$HOME/podman/n8n"
N8N_DATA_DIR="$N8N_BASE_DIR/data"

# create the data directory
echo "Creating data directory: $N8N_DATA_DIR"
mkdir -p "$N8N_DATA_DIR"

# change data directory to 777
echo "Setting initial directory permissions to 777..."
chmod 777 "$N8N_DATA_DIR"

# podman unshare chown
echo "Changing ownership (group to 'users') using podman unshare..."
podman unshare chown -R :users "$N8N_DATA_DIR"

# podman unshare setfacl
echo "Setting default ACL for new files to be group-editable..."
podman unshare setfacl -d -m g::rwx "$N8N_DATA_DIR"

#+end_src

**** n8n tangle
***** docker-compose.yml

+ home dir

#+NAME: n8n-docker-compose.yml-home-dir
#+BEGIN_SRC yaml :noweb yes :tangle "~/podman/n8n/docker-compose.yml"
<<n8n-docker-compose.yml>>
#+END_SRC
  
+ current dir

#+NAME: n8n-docker-compose.yml-current-dir
#+BEGIN_SRC yaml :noweb yes :tangle "podman/n8n/docker-compose.yml"
<<n8n-docker-compose.yml>>
#+END_SRC

***** init-data.sh

+ home dir

#+NAME: n8n-init-data.sh-home-dir
#+BEGIN_SRC bash :noweb yes :tangle "~/podman/n8n/init-data.sh" :tangle-mode (identity #o755)
<<n8n-init-data.sh>>
#+END_SRC
  
+ current dir

#+NAME: n8n-init-data.sh-current-dir
#+BEGIN_SRC bash :noweb yes :tangle "podman/n8n/init-data.sh" :tangle-mode (identity #o755)
<<n8n-init-data.sh>>
#+END_SRC

***** .env

+ current dir

#+NAME: n8n-env-current-dir
#+BEGIN_SRC sh :noweb yes :tangle "podman/n8n/.env"
<<n8n-env>>
#+END_SRC

***** setup-n8n

+ home dir

#+NAME: setup-n8n-home-dir
#+BEGIN_SRC bash :noweb yes :tangle "~/podman/n8n/setup-n8n" :tangle-mode (identity #o755)
<<setup-n8n>>
#+END_SRC
  
+ current dir

#+NAME: setup-n8n-current-dir
#+BEGIN_SRC bash :noweb yes :tangle "podman/n8n/setup-n8n" :tangle-mode (identity #o755)
<<setup-n8n>>
#+END_SRC

*** searxng
**** run searxng

start searxng by running

#+begin_src sh
podman-compose up -d
#+end_src

stop searxng by running 

#+begin_src sh
podman-compose down
#+end_src

**** searxng-config
***** compose.yaml

#+NAME: searxng-compose.yaml 
#+begin_src yaml
version: "3.8"

services:
  redis:
    container_name: redis
    image: docker.io/valkey/valkey:8-alpine
    command: valkey-server --save 30 1 --loglevel warning
    restart: unless-stopped
    networks:
      - searxng
    volumes:
      - valkey-data2:/data
    cap_drop:
      - ALL
    cap_add:
      - SETGID
      - SETUID
      - DAC_OVERRIDE
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
        max-file: "1"

  searxng:
    container_name: searxng
    image: docker.io/searxng/searxng:latest
    restart: unless-stopped
    networks:
      - searxng
    ports:
      - "0.0.0.0:8080:8080"
    volumes:
      - ${HOME}/podman/searxng:/etc/searxng:rw
      - ./searxng-genkey:/usr/local/bin/searxng-genkey
    environment:
      - SEARXNG_BASE_URL=http://localhost:8080
      - SEARXNG_REDIS_URL=redis://redis:6379/0
      - SEARXNG_SECRET=${SEARXNG_SECRET}
      - UWSGI_WORKERS=${SEARXNG_UWSGI_WORKERS:-4}
      - UWSGI_THREADS=${SEARXNG_UWSGI_THREADS:-4}
    user: "1000:100"
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
        max-file: "1"

networks:
  searxng:

volumes:
  searxng_config:
  valkey-data2:
#+end_src

***** limiter.toml

#+NAME: searxng-limiter.toml
#+begin_src toml
# This configuration file updates the default configuration file
# See https://github.com/searxng/searxng/blob/master/searx/limiter.toml

[botdetection.ip_limit]
# activate link_token method in the ip_limit method
link_token = true
#+end_src

***** settings.yml

#+NAME: searxng-settings.yml
#+begin_src yaml
# see https://docs.searxng.org/admin/settings/settings.html#settings-use-default-settings
use_default_settings: true
server:
  # base_url is defined in the SEARXNG_BASE_URL environment variable, see .env and docker-compose.yml
  secret_key: ""
  limiter: false  # changed to false for open-webui
  image_proxy: true
ui:
  static_use_hash: true
valkey:
  url: redis://redis:6379/0
general:
  # Debug mode, only for development. Is overwritten by ${SEARXNG_DEBUG}
  debug: false
  # displayed name
  instance_name: "Searxng"
  # For example: https://example.com/privacy
  privacypolicy_url: false
  # use true to use your own donation page written in searx/info/en/donate.md
  # use false to disable the donation link
  donation_url: false
  # mailto:contact@example.com
  contact_url: false
  # record stats
  enable_metrics: true
  # expose stats in open metrics format at /metrics
  # leave empty to disable (no password set)
  # open_metrics: <password>
  open_metrics: ''

search:
  # Filter results. 0: None, 1: Moderate, 2: Strict
  safe_search: 0
  # Existing autocomplete backends: "360search", "baidu", "brave", "dbpedia", "duckduckgo", "google", "yandex",
  # "mwmbl", "seznam", "sogou", "stract", "swisscows", "qwant", "wikipedia" -
  # leave blank to turn it off by default.
  autocomplete: ""
  # minimun characters to type before autocompleter starts
  autocomplete_min: 4
  # backend for the favicon near URL in search results.
  # Available resolvers: "allesedv", "duckduckgo", "google", "yandex" - leave blank to turn it off by default.
  favicon_resolver: ""
  # Default search language - leave blank to detect from browser information or
  # use codes from 'languages.py'
  default_lang: "auto"
  # max_page: 0  # if engine supports paging, 0 means unlimited numbers of pages
  # Available languages
  # languages:
  #   - all
  #   - en
  #   - en-US
  #   - de
  #   - it-IT
  #   - fr
  #   - fr-BE
  # ban time in seconds after engine errors
  ban_time_on_fail: 5
  # max ban time in seconds after engine errors
  max_ban_time_on_fail: 120
  suspended_times:
    # Engine suspension time after error (in seconds; set to 0 to disable)
    # For error "Access denied" and "HTTP error [402, 403]"
    SearxEngineAccessDenied: 86400
    # For error "CAPTCHA"
    SearxEngineCaptcha: 86400
    # For error "Too many request" and "HTTP error 429"
    SearxEngineTooManyRequests: 3600
    # Cloudflare CAPTCHA
    cf_SearxEngineCaptcha: 1296000
    cf_SearxEngineAccessDenied: 86400
    # ReCAPTCHA
    recaptcha_SearxEngineCaptcha: 604800

  # remove format to deny access, use lower case.
  # formats: [html, csv, json, rss]
  formats:
    - html
    - csv
    - json
    - rss
categories_as_tabs:
  general:
  images:
  videos:
  news:
  it:
  files:
  map:
  social media:
#+end_src

***** searxng-genkey

#+NAME: searxng-genkey
#+begin_src sh
#!/bin/sh

# This script generates a new secret key and starts the SearXNG containers.

# Generate a new random 32-byte hex secret key.
SEARXNG_SECRET=$(openssl rand -hex 32)
#+end_src

**** searxng-tangle
***** compose.yaml

+ home dir

#+NAME: searxng-compose.yaml-home-dir
#+BEGIN_SRC yaml :noweb yes :tangle "~/podman/searxng/compose.yaml"
<<searxng-compose.yaml>>
#+END_SRC
  
+ current dir

#+NAME: searxng-compose.yaml-current-dir
#+BEGIN_SRC yaml :noweb yes :tangle "podman/searxng/compose.yaml"
<<searxng-compose.yaml>>
#+END_SRC

***** limiter.toml

+ home dir

#+NAME: searxng-limiter.toml-home-dir
#+BEGIN_SRC toml :noweb yes :tangle "~/podman/searxng/limiter.toml"
<<searxng-limiter.toml>>
#+END_SRC
  
+ current dir

#+NAME: searxng-limiter.toml-current-dir
#+BEGIN_SRC toml :noweb yes :tangle "podman/searxng/limiter.toml"
<<searxng-limiter.toml>>
#+END_SRC

***** settings.yml

+ home dir

#+NAME: searxng-settings.yml-home-dir
#+BEGIN_SRC yaml :noweb yes :tangle "~/podman/searxng/settings.yml"
<<searxng-settings.yml>>
#+END_SRC
  
+ current dir

#+NAME: searxng-settings.yml-current-dir
#+BEGIN_SRC yaml :noweb yes :tangle "podman/searxng/settings.yml"
<<searxng-settings.yml>>
#+END_SRC

***** searxng-genkey

+ home dir

#+NAME: searxng-genkey-home-dir
#+BEGIN_SRC sh :noweb yes :tangle "~/podman/searxng/searxng-genkey" :tangle-mode (identity #o755)
<<searxng-genkey>>
#+END_SRC
  
+ current dir

#+NAME: searxng-genkey-current-dir
#+BEGIN_SRC sh :noweb yes :tangle "podman/searxng/searxng-genkey" :tangle-mode (identity #o755)
<<searxng-genkey>>
#+END_SRC

** wireplumber
*** wireplumber config

#+NAME: wireplumber
#+BEGIN_SRC conf
monitor.alsa.rules = [
  {
    matches = [
      {
        object.path = "alsa:acp:PCH:6:playback"
      }
    ]
    actions = {
      update-props = {
        node.description = "laptop"
      }
    }
  },
  {
    matches = [
      {
        object.path = "alsa:acp:PCH:0:capture"
      }
    ]
    actions = {
      update-props = {
        node.description = "mic"
      }
    }
  },
  {
    matches = [
      {
        object.path = "alsa:acp:SoundSticks:1:playback"
      }
    ]
    actions = {
      update-props = {
        node.description = "speakers"
      }
    }
  },
  {
    matches = [
      {
        object.path = "alsa:acp:Snowball:0:capture"
      }
    ]
    actions = {
      update-props = {
        node.description = "yeti"
      }
    }
  }
]
#+END_SRC

*** wireplumber tangle

+ home dir

#+NAME: wireplumber-home-dir
#+BEGIN_SRC conf :noweb yes :tangle "~/.config/wireplumber/wireplumber.conf.d/device-rename.conf"
<<wireplumber>>
#+END_SRC

+ current dir

#+NAME: wireplumber-current-dir
#+BEGIN_SRC conf :noweb yes :tangle ".config/wireplumber/wireplumber.conf.d/device-rename.conf"
<<wireplumber>>
#+END_SRC

** kodi
*** kodi config
**** playercorefactory.xml

#+NAME: playercorefactory.xml
#+BEGIN_SRC xml
<playercorefactory>
 <players>
   <player name="save url" type="ExternalPlayer" audio="true" video="true">
	<filename>printf</filename>
     <args>"%s\n" "{0}" > "$HOME/desktop/url-$(date +"%Y-%m-%d-%H-%M-%S").txt"</args>
     <hidexbmc>false</hidexbmc>
   </player>
   <player name="play" type="ExternalPlayer" audio="false" video="true">
	<filename>"$HOME/.venv/pilfer/bin/pilferplay"</filename>
     <args>-i "{0}"</args>
     <hidexbmc>true</hidexbmc>
   </player>  
   <player name="mpv" type="ExternalPlayer" audio="false" video="true">
	<filename>mpv</filename>
     <args>"{0}"</args>
     <hidexbmc>true</hidexbmc>
   </player>  
   <player name="emacs" type="ExternalPlayer" audio="false" video="true">
	<filename>emacsclient</filename>
     <args>-u -e "(mpv-play-remote-video \"{0}\")"</args>
     <hidexbmc>true</hidexbmc>
   </player>  
   <player name="record video" type="ExternalPlayer" audio="false" video="true">
	<filename>"tsp $HOME/.venv/pilfer/bin/pilfer"</filename>
     <args>-i "{0}" &</args>
     <hidexbmc>false</hidexbmc>
   </player>  
   <player name="record video - 30 minutes" type="ExternalPlayer" audio="false" video="true">
	<filename>"tsp $HOME/.venv/pilfer/bin/pilfer"</filename>
     <args>-i "{0}" -t 00:30:00 &</args>
     <hidexbmc>false</hidexbmc>
   </player> 
   <player name="record video - 1 hour" type="ExternalPlayer" audio="false" video="true">
	<filename>"ts $HOME/.venv/pilfer/bin/pilfer"</filename>
     <args>-i "{0}" -t 01:00:00 &</args>
     <hidexbmc>false</hidexbmc>
   </player> 
   <player name="record video - 2 hours" type="ExternalPlayer" audio="false" video="true">
	<filename>"tsp $HOME/.venv/pilfer/bin/pilfer"</filename>
     <args>-i "{0}" -t 02:00:00 &</args>
     <hidexbmc>false</hidexbmc>
   </player> 
   <player name="record video - 3 hours" type="ExternalPlayer" audio="false" video="true">
	<filename>"tsp $HOME/.venv/pilfer/bin/pilfer"</filename>
     <args>-i "{0}" -t 03:00:00 &</args>
     <hidexbmc>false</hidexbmc>
   </player> 
   <player name="record audio" type="ExternalPlayer" audio="true" video="true">
	<filename>"tsp $HOME/.venv/pilfer/bin/pilfer"</filename>
     <args>-a "{0}" &</args>
     <hidexbmc>false</hidexbmc>
   </player>  
   <player name="record audio - 30 minutes" type="ExternalPlayer" audio="true" video="true">
	<filename>"tsp $HOME/.venv/pilfer/bin/pilfer"</filename>
     <args>-a "{0}" -t 00:30:00 &</args>
     <hidexbmc>false</hidexbmc>
   </player> 
   <player name="record audio - 1 hour" type="ExternalPlayer" audio="true" video="true">
	<filename>"tsp $HOME/.venv/pilfer/bin/pilfer"</filename>
     <args>-a "{0}" -t 01:00:00 &</args>
     <hidexbmc>false</hidexbmc>
   </player> 
   <player name="record audio - 2 hours" type="ExternalPlayer" audio="true" video="true">
	<filename>"tsp $HOME/.venv/pilfer/bin/pilfer"</filename>
     <args>-a "{0}" -t 02:00:00 &</args>
     <hidexbmc>false</hidexbmc>
   </player> 
   <player name="record audio - 3 hours" type="ExternalPlayer" audio="true" video="true">
	<filename>"tsp $HOME/.venv/pilfer/bin/pilfer"</filename>
     <args>-a "{0}" -t 03:00:00 &</args>
     <hidexbmc>false</hidexbmc>
   </player> 
 </players>
 <rules action="overwrite">
   <rule internetstream="true" player="mpv"></rule>
   <rule video="true" player="mpv"></rule>
   <!-- <rule internetstream="true" player="play"></rule> -->

   <!-- change the default player below -->

   <!-- <rule protocols="nfs|smb" player="dvdplayer"></rule> -->
   <!-- uncomment to make play the default player
    <rule video="true" player="play"></rule>
   -->
   
   <!-- uncomment to make record the default player
    <rule video="true" player="record"></rule>
   -->
   
 </rules>
</playercorefactory>
#+END_SRC

*** kodi tangle
**** playercorefactory.xml tangle

+ home dir

#+NAME: playercorefactory.xml-home-dir
#+BEGIN_SRC xml :noweb yes :tangle "~/.kodi/userdata/playercorefactory.xml"
<<playercorefactory.xml>>
#+END_SRC

+ current dir

#+NAME: playercorefactory.xml-current-dir
#+BEGIN_SRC xml :noweb yes :tangle ".kodi/userdata/playercorefactory.xml"
<<playercorefactory.xml>>
#+END_SRC

** aria2c
*** aria2c config

#+NAME: aria2c
#+begin_src conf
# aria2 config
 bt-max-peers=0
 bt-request-peer-speed-limit=0
 max-overall-upload-limit=128k
 bt-external-ip=127.0.0.1
 dht-listen-port=6882
 enable-dht=true
 enable-peer-exchange=true
 listen-port=6881
 bt-force-encryption=true
 bt-min-crypto-level=arc4
 bt-require-crypto=true
 follow-torrent=mem
 seed-ratio=100
 seed-time=0
 socket-recv-buffer-size=1M
 event-poll=epoll
 realtime-chunk-checksum=true
 allow-overwrite=true
 always-resume=true
 auto-file-renaming=false
 continue=true
 remote-time=true
 peer-id-prefix=""
 user-agent=""
 summary-interval=0
 ftp-pasv=true
 ftp-reuse-connection=true
 metalink-language=en-US
 metalink-location=us
 metalink-preferred-protocol=https
 lowest-speed-limit=50K
 max-concurrent-downloads=10
 max-connection-per-server=3
 min-split-size=5M
 split=10
 check-certificate=true
 conditional-get=true
 disable-ipv6=true
 http-accept-gzip=true
#+end_src

*** aria2c tangle

+ home dir
  
#+NAME: aria2c-home-dir
#+begin_src conf :noweb yes :tangle "~/.config/aria2/aria2.conf"
<<aria2c>>
#+end_src

+ current dir

#+NAME: aria2c-current-dir
#+begin_src conf :noweb yes :tangle ".config/aria2/aria2.conf"
<<aria2c>>
#+end_src

** mpd
*** mpd config
**** mpd.conf config

#+NAME: mpd
#+BEGIN_SRC conf
music_directory		"~/Music"
playlist_directory	"~/.config/mpd/playlists"
db_file			"~/.config/mpd/mpd.db"
log_file		"~/.config/mpd/mpd.log"
pid_file		"~/.config/mpd/mpd.pid"
state_file		"~/.config/mpd/mpdstate"
sticker_file		"~/.config/mpd/sticker.sql"
bind_to_address		"/home/djwilcox/.config/mpd/socket"
auto_update    "yes"
decoder {
        plugin                  "hybrid_dsd"
        enabled                 "no"
#       gapless                 "no"
}
#audio_output {
#	type		"alsa"
#	name		"My ALSA Device"
#}

#audio_output {
#        type            "pulse"
#        name            "pulse audio"
#}


audio_output {
        type            "pipewire"
        name            "pipewire"
}

filesystem_charset		"UTF-8"
#+END_SRC

*** mpd tangle
**** mpd.conf tangle

+ home dir

#+NAME: mpd-home-dir
#+BEGIN_SRC conf :noweb yes :tangle "~/.config/mpd/mpd.conf"
<<mpd>>
#+END_SRC

+ current dir

#+NAME: mpd-current-dir
#+BEGIN_SRC conf :noweb yes :tangle ".config/mpd/mpd.conf"
<<mpd>>
#+END_SRC

**** playlists tangle

+ home dir

#+NAME: mpd-playlists-home-dir
#+BEGIN_SRC conf :noweb yes :tangle "~/.config/mpd/playlists/radio.m3u"
<<mpd-playlists>>
#+END_SRC

+ current dir

#+NAME: mpd-playlists-current-dir
#+BEGIN_SRC conf :noweb yes :tangle ".config/mpd/playlists/radio.m3u"
<<mpd-playlists>>
#+END_SRC

** ncmpc
*** ncmpc config

#+NAME: ncmpc
#+BEGIN_SRC conf
##
## Configuration file for ncmpc (~/.ncmpc/config)
##

############## Connection ###################
## Connect to mpd running on a specified host
#host = "localhost"
#host = "127.0.0.1"
host = "/home/djwilcox/.config/mpd/socket"

## Connect to mpd on the specified port.
#port = 6600

## Connect to mpd using the specified password.
#password = "mpd"

############## Interface ####################
## Enable mouse support (if enabled at compile time).
#enable-mouse = no

## A list of screens to cycle through when using
## the previous/next screen commands (tab and shift+tab).
## names: playlist browse help artist search song keydef lyrics outputs
screen-list = playlist browse

## Default search mode for the search screen. The mode is an
## integer index, with  0  for title, 1 for artist, 2 for album,
## 3 for filename, and 4 for artist+title.
#search-mode = 0

## Auto center (center the playing track in the playlist)
#auto-center = no

## Show the most recent query when using find.
#find-show-last = no

## Wrapped find mode.
#find-wrap = yes

## Wrapped cursor movement.
wrap-around = yes

## Ring bell when find wraps around.
#bell-on-wrap = yes

## Sound audible bell on alerts.
#audible-bell = yes

## Enable visible bell on alerts.
#visible-bell = no

## Default crossfade time in seconds.
#crossfade-time = 10

## Seek forward/backward by NUM seconds.
seek-time = 30

############## Display ######################
## Show a list of the screens in the top line on startup.
#welcome-screen-list = yes

## Make the cursor as wide as the screen.
#wide-cursor = yes

## Use the terminal's hardware cursor instead of inverse colors
#hardware-cursor = yes

## Hide playlist cursor after x seconds (0 disables this feature).
#hide-cursor = 5

## Scroll the title if it is too long for the screen.
#scroll = yes

## The separator to show at the end of the scrolling title.
#scroll-sep = " *** "

## list-format
## The format used to display songs in the main window.
list-format = "%name%|[%artist% - ]%title%|%file%"

## The format used to display songs on the status line.
status-format = "[%artist% - ]%title%|%shortfile%"

## The time, in seconds, for which status messages will be displayed.
#status-message-time = 3

## Display the time in the status bar when idle.
#display-time = yes

## Sets whether to display remaining or elapsed time in
## the status window. Default is elapsed.
#timedisplay-type = elapsed

## Show the bitrate in the status bar when playing a stream.
visible-bitrate = yes

## Change the XTerm title (ncmpc will not restore the title).
#set-xterm-title = no

## The format used to for the xterm title when ncmpc is playing.
#xterm-title-format = "ncmpc: [ %name%|[%artist% - ]%title%|%file%]"

## Automatically save the lyrics after receiving them.
#lyrics-autosave = no

## Display song length in second column
#second-column = yes

############## Colors #######################
## colors: none, black, red, green, yellow, blue, magenta, cyan, white
## attributes: standout, underline, reverse, blink, dim, bold
##
## Colors can also be given as an integer representing a terminal specific
## color code. The special color, none, represents the terminals default color.

## Enable/disable colors.
#enable-colors = yes
enable-colors = no

## Set the background color.
color background = none

## Set the text color for the title row.
color title = none,black

## Set the text color for the title row (the bold part).
color title-bold = blue,bold

## Set the color of the line on the second row.
color line = black

## Set the text color used to indicate mpd flags on the second row.
color line-flags = black,bold

## Set the text color in the main area of ncmpc.
color list = none

## Set the bold text color in the main area of ncmpc.
color list-bold = none,bold

## Sets the text color of directories in the browser
color browser-directory = none

## Sets the text color of playlists in the browser
color browser-playlist = none

## Set the color of the progress indicator.
color progressbar = black

## Set the text color used to display mpd status in the status window.
color status-state = black,bold

## Set the text color used to display song names in the status window.
color status-song  = black

## Set the text color used to display time the status window.
color status-time  = black

## Text color used to display alerts in the status window.
color alert = black,bold

## Redefine any of the base colors.
## The RGB values must be an integer value between 0 and 1000.
## Note: Only some terminals allow redefinitions of colors!
#colordef yellow = 255, 140, 0
#+END_SRC

*** ncmpc tangle

+ home dir

#+NAME: ncmpc-home-dir
#+BEGIN_SRC conf :noweb yes :tangle "~/.config/ncmpc/config"
<<ncmpc>>
#+END_SRC

+ current dir

#+NAME: ncmpc-current-dir
#+BEGIN_SRC conf :noweb yes :tangle ".config/ncmpc/config"
<<ncmpc>>
#+END_SRC

** systemd
*** systemd config
**** mpd.service

#+NAME: mpd.service
#+BEGIN_SRC conf
[Unit]
Description=Music Player Daemon
After=network.target sound.target

[Service]
ExecStart=/usr/bin/mpd --no-daemon /home/djwilcox/.config/mpd/mpd.conf

[Install]
WantedBy=default.target
#+END_SRC

*** systemd tangle
**** mpd.service

+ home dir

#+NAME: mpd.service-home-dir
#+BEGIN_SRC conf :noweb yes :tangle "~/.config/systemd/user/mpd.service"
<<mpd.service>>
#+END_SRC

+ current dir

#+NAME: mpd.service-current-dir
#+BEGIN_SRC conf :noweb yes :tangle ".config/systemd/user/mpd.service"
<<mpd.service>>
#+END_SRC

** user-dirs.dirs
*** user-dirs.dirs config

#+NAME: user-dirs.dirs
#+BEGIN_SRC conf
XDG_DESKTOP_DIR="$HOME/Desktop"
XDG_DOCUMENTS_DIR="$HOME/Documents"
XDG_DOWNLOAD_DIR="$HOME/Downloads"
XDG_MUSIC_DIR="$HOME/Music"
XDG_PICTURES_DIR="$HOME/Pictures"
XDG_VIDEOS_DIR="$HOME/Video"
#+END_SRC

*** user-dirs.conf config

#+NAME: user-dirs.conf
#+BEGIN_SRC conf
enabled=False
#+END_SRC

*** user-dirs.dirs tangle

+ home dir
  
#+NAME: user-dirs.dirs-home-dir
#+BEGIN_SRC conf :noweb yes :tangle "~/.config/user-dirs.dirs"
<<user-dirs.dirs>>
#+END_SRC
  
+ current dir

#+NAME: user-dirs.dirs-current-dir
#+BEGIN_SRC conf :noweb yes :tangle ".config/user-dirs.dirs"
<<user-dirs.dirs>>
#+END_SRC

*** user-dirs.conf tangle

+ home dir
  
#+NAME: user-dirs.conf-home-dir
#+BEGIN_SRC conf :noweb yes :tangle "~/.config/user-dirs.conf"
<<user-dirs.conf>>
#+END_SRC
  
+ current dir

#+NAME: user-dirs.conf-current-dir
#+BEGIN_SRC conf :noweb yes :tangle ".config/user-dirs.conf"
<<user-dirs.conf>>
#+END_SRC

** autostart
*** autostart config
**** nognome_notications config

#+NAME: nognome_notications
#+BEGIN_SRC conf
[Desktop Entry]
Type=Application
Exec=/home/djwilcox/bin/nognome_notifications
Hidden=True
NoDisplay=True
X-GNOME-Autostart-enabled=true
Name=nognome_notifications
Comment=nognome_notifications
#+END_SRC

*** autostart tangle
**** nognome_notications tangle

+ home dir

#+NAME: nognome_notications-autostart-home-dir
#+BEGIN_SRC conf :noweb yes :tangle "~/.config/autostart/nognome_notications.desktop"
<<nognome_notications>>
#+END_SRC

+ current dir

#+NAME: nognome_notications-autostart-current-dir
#+BEGIN_SRC conf :noweb yes :tangle ".config/autostart/nognome_notications.desktop"
<<nognome_notications>>
#+END_SRC

** gitconfig
*** gitconfig config

#+NAME: gitconfig
#+BEGIN_SRC conf
[user]
name = Daniel J Wilcox
email = danieljwilcox@gmail.com
[color]
ui = true
#+END_SRC

*** gitconfig tangle

+ home dir

#+NAME: gitconfig-home-dir
#+BEGIN_SRC conf :noweb yes :tangle "~/.config/git/config"
<<gitconfig>>
#+END_SRC

+ current dir

#+NAME: gitconfig-current-dir
#+BEGIN_SRC conf :noweb yes :tangle ".config/git/gitconfig"
<<gitconfig>>
#+END_SRC

** gtk
*** gtk-3.0 config 

#+NAME: gtk-3
#+BEGIN_SRC conf
[Settings]
gtk-theme-name=Yaru-blue-dark
gtk-icon-theme-name=Yaru-blue-dark
gtk-application-prefer-dark-theme=true
#+END_SRC

*** gtk-4.0 config 

#+NAME: gtk-4
#+BEGIN_SRC conf
[Settings]
gtk-theme-name=Yaru-blue-dark
gtk-icon-theme-name=Yaru-blue-dark
gtk-application-prefer-dark-theme=true
#+END_SRC

*** gtk-3.0 tangle

+ home dir

#+NAME: gtk-3-home-dir
#+BEGIN_SRC conf :noweb yes :tangle "~/.config/gtk-3.0/settings.ini"
<<gtk-3>>
#+END_SRC

+ current dir

#+NAME: gtk-3-current-dir
#+BEGIN_SRC conf :noweb yes :tangle ".config/gtk-3.0/settings.ini"
<<gtk-3>>
#+END_SRC

*** gtk-4.0 tangle

+ home dir

#+NAME: gtk-4-home-dir
#+BEGIN_SRC conf :noweb yes :tangle "~/.config/gtk-4.0/settings.ini"
<<gtk-4>>
#+END_SRC

+ current dir

#+NAME: gtk-4-current-dir
#+BEGIN_SRC conf :noweb yes :tangle ".config/gtk-4.0/settings.ini"
<<gtk-4>>
#+END_SRC

** wget
*** wget config

#+NAME: wget
#+BEGIN_SRC conf
hsts-file=/home/djwilcox/.cache/wget-hsts
#+END_SRC

*** wget tangle

+ home dir

#+NAME: wget-home-dir
#+BEGIN_SRC conf :noweb yes :tangle "~/.config/wget/wgetrc"
<<wget>>
#+END_SRC

+ current dir

#+NAME: wget-current-dir
#+BEGIN_SRC conf :noweb yes :tangle ".config/wget/wgetrc"
<<wget>>
#+END_SRC

** weechat
*** weechat config 

#+NAME: weechat.conf
#+BEGIN_SRC conf
#
# weechat -- weechat.conf
#
# WARNING: It is NOT recommended to edit this file by hand,
# especially if WeeChat is running.
#
# Use /set or similar command to change settings in WeeChat.
#
# For more info, see: https://weechat.org/doc/quickstart
#

[debug]

[startup]
command_after_plugins = ""
command_before_plugins = ""
display_logo = off
display_version = on
sys_rlimit = ""

[look]
align_end_of_lines = message
align_multiline_words = on
bar_more_down = "++"
bar_more_left = "<<"
bar_more_right = ">>"
bar_more_up = "--"
bare_display_exit_on_input = on
bare_display_time_format = "%H:%M"
buffer_auto_renumber = on
buffer_notify_default = all
buffer_position = end
buffer_search_case_sensitive = off
buffer_search_force_default = off
buffer_search_regex = off
buffer_search_where = prefix_message
buffer_time_format = "[%H:%M]"
color_basic_force_bold = off
color_inactive_buffer = on
color_inactive_message = on
color_inactive_prefix = on
color_inactive_prefix_buffer = on
color_inactive_time = off
color_inactive_window = on
color_nick_offline = off
color_pairs_auto_reset = 5
color_real_white = off
command_chars = ""
command_incomplete = off
confirm_quit = off
confirm_upgrade = off
day_change = on
day_change_message_1date = "-- %a, %d %b %Y --"
day_change_message_2dates = "-- %%a, %%d %%b %%Y (%a, %d %b %Y) --"
eat_newline_glitch = off
emphasized_attributes = ""
highlight = ""
highlight_regex = ""
highlight_tags = ""
hotlist_add_conditions = "${away} || ${buffer.num_displayed} == 0"
hotlist_buffer_separator = ", "
hotlist_count_max = 2
hotlist_count_min_msg = 2
hotlist_names_count = 3
hotlist_names_length = 0
hotlist_names_level = 12
hotlist_names_merged_buffers = off
hotlist_prefix = "H: "
hotlist_remove = merged
hotlist_short_names = on
hotlist_sort = group_time_asc
hotlist_suffix = ""
hotlist_unique_numbers = on
input_cursor_scroll = 20
input_share = none
input_share_overwrite = off
input_undo_max = 32
item_away_message = on
item_buffer_filter = "*"
item_buffer_zoom = "!"
item_mouse_status = "M"
item_time_format = "%H:%M"
jump_current_to_previous_buffer = on
jump_previous_buffer_when_closing = on
jump_smart_back_to_buffer = on
key_bind_safe = on
key_grab_delay = 800
mouse = off
mouse_timer_delay = 100
nick_color_force = ""
nick_color_hash = djb2
nick_color_stop_chars = "_|["
nick_prefix = ""
nick_suffix = ""
paste_auto_add_newline = on
paste_bracketed = on
paste_bracketed_timer_delay = 10
paste_max_lines = 1
prefix_action = " *"
prefix_align = none
prefix_align_max = 15
prefix_align_min = 0
prefix_align_more = "+"
prefix_align_more_after = on
prefix_buffer_align = right
prefix_buffer_align_max = 0
prefix_buffer_align_more = "+"
prefix_buffer_align_more_after = on
prefix_error = "=!="
prefix_join = "-->"
prefix_network = "--"
prefix_quit = "<--"
prefix_same_nick = ""
prefix_suffix = "|"
quote_nick_prefix = "<"
quote_nick_suffix = ">"
quote_time_format = "%H:%M:%S"
read_marker = line
read_marker_always_show = off
read_marker_string = "- "
save_config_on_exit = on
save_layout_on_exit = none
scroll_amount = 3
scroll_bottom_after_switch = off
scroll_page_percent = 100
search_text_not_found_alert = on
separator_horizontal = "-"
separator_vertical = ""
tab_width = 1
time_format = "%a, %d %b %Y %T"
window_auto_zoom = off
window_separator_horizontal = on
window_separator_vertical = on
window_title = "WeeChat ${info:version}"
word_chars_highlight = "!\u00A0,-,_,|,alnum"
word_chars_input = "!\u00A0,-,_,|,alnum"

[palette]

[color]
bar_more = lightmagenta
chat = default
chat_bg = default
chat_buffer = default
chat_channel = white
chat_day_change = cyan
chat_delimiters = 2
chat_highlight = default
chat_highlight_bg = 1
chat_host = cyan
chat_inactive_buffer = default
chat_inactive_window = default
chat_nick = default
chat_nick_colors = "cyan,magenta,green,brown,lightblue,default,lightcyan,lightmagenta,lightgreen,blue"
chat_nick_offline = default
chat_nick_offline_highlight = default
chat_nick_offline_highlight_bg = blue
chat_nick_other = cyan
chat_nick_prefix = green
chat_nick_self = default
chat_nick_suffix = green
chat_prefix_action = white
chat_prefix_buffer = brown
chat_prefix_buffer_inactive_buffer = default
chat_prefix_error = yellow
chat_prefix_join = lightgreen
chat_prefix_more = lightmagenta
chat_prefix_network = magenta
chat_prefix_quit = lightred
chat_prefix_suffix = green
chat_read_marker = default
chat_read_marker_bg = default
chat_server = brown
chat_tags = red
chat_text_found = yellow
chat_text_found_bg = default
chat_time = default
chat_time_delimiters = 2
chat_value = cyan
chat_value_null = blue
emphasized = default
emphasized_bg = default
input_actions = lightgreen
input_text_not_found = red
item_away = yellow
nicklist_away = cyan
nicklist_group = green
separator = darkgray
status_count_highlight = magenta
status_count_msg = brown
status_count_other = default
status_count_private = green
status_data_highlight = default
status_data_msg = yellow
status_data_other = default
status_data_private = default
status_filter = green
status_more = yellow
status_mouse = green
status_name = white
status_name_ssl = lightgreen
status_nicklist_count = default
status_number = yellow
status_time = default

[completion]
base_word_until_cursor = on
command_inline = on
default_template = "%(nicks)|%(irc_channels)"
nick_add_space = on
nick_case_sensitive = off
nick_completer = ":"
nick_first_only = off
nick_ignore_chars = "[]`_-^"
partial_completion_alert = on
partial_completion_command = off
partial_completion_command_arg = off
partial_completion_count = on
partial_completion_other = off

[history]
display_default = 5
max_buffer_lines_minutes = 0
max_buffer_lines_number = 4096
max_commands = 100
max_visited_buffers = 50

[proxy]

[network]
connection_timeout = 60
gnutls_ca_file = "/etc/ssl/certs/ca-certificates.crt"
gnutls_handshake_timeout = 30
proxy_curl = ""

[plugin]
autoload = "*,!tcl,!ruby,!python2,!lua,!aspell"
debug = off
extension = ".so,.dll"
path = "%h/plugins"
save_config_on_unload = on

[bar]
buflist.color_bg = default
buflist.color_delim = default
buflist.color_fg = default
buflist.conditions = ""
buflist.filling_left_right = vertical
buflist.filling_top_bottom = columns_vertical
buflist.hidden = off
buflist.items = "buflist"
buflist.position = left
buflist.priority = 0
buflist.separator = on
buflist.size = 0
buflist.size_max = 0
buflist.type = root
fset.color_bg = default
fset.color_delim = cyan
fset.color_fg = default
fset.conditions = "${buffer.full_name} == fset.fset"
fset.filling_left_right = vertical
fset.filling_top_bottom = horizontal
fset.hidden = off
fset.items = "fset"
fset.position = top
fset.priority = 0
fset.separator = on
fset.size = 3
fset.size_max = 3
fset.type = window
input.color_bg = default
input.color_delim = cyan
input.color_fg = default
input.conditions = ""
input.filling_left_right = vertical
input.filling_top_bottom = horizontal
input.hidden = off
input.items = "[input_prompt]+(away),[input_search],[input_paste],input_text"
input.position = bottom
input.priority = 1000
input.separator = off
input.size = 1
input.size_max = 0
input.type = window
isetbar.color_bg = default
isetbar.color_delim = cyan
isetbar.color_fg = default
isetbar.conditions = ""
isetbar.filling_left_right = vertical
isetbar.filling_top_bottom = horizontal
isetbar.hidden = on
isetbar.items = "isetbar_help"
isetbar.position = top
isetbar.priority = 0
isetbar.separator = on
isetbar.size = 3
isetbar.size_max = 3
isetbar.type = window
nicklist.color_bg = default
nicklist.color_delim = cyan
nicklist.color_fg = default
nicklist.conditions = "${nicklist}"
nicklist.filling_left_right = vertical
nicklist.filling_top_bottom = columns_vertical
nicklist.hidden = off
nicklist.items = "buffer_nicklist"
nicklist.position = right
nicklist.priority = 200
nicklist.separator = on
nicklist.size = 0
nicklist.size_max = 0
nicklist.type = window
status.color_bg = 0
status.color_delim = cyan
status.color_fg = default
status.conditions = ""
status.filling_left_right = vertical
status.filling_top_bottom = horizontal
status.hidden = off
status.items = "[time],[buffer_last_number],[buffer_plugin],buffer_number+:+buffer_name+(buffer_modes)+{buffer_nicklist_count}+buffer_zoom+buffer_filter,scroll,[lag],[hotlist],completion"
status.position = bottom
status.priority = 500
status.separator = off
status.size = 1
status.size_max = 0
status.type = window
title.color_bg = 0
title.color_delim = cyan
title.color_fg = default
title.conditions = ""
title.filling_left_right = vertical
title.filling_top_bottom = horizontal
title.hidden = off
title.items = "buffer_title"
title.position = top
title.priority = 500
title.separator = off
title.size = 1
title.size_max = 0
title.type = window

[layout]

[notify]

[filter]

[key]
ctrl-? = "/input delete_previous_char"
ctrl-A = "/input move_beginning_of_line"
ctrl-B = "/input move_previous_char"
ctrl-C_ = "/input insert \x1F"
ctrl-Cb = "/input insert \x02"
ctrl-Cc = "/input insert \x03"
ctrl-Ci = "/input insert \x1D"
ctrl-Co = "/input insert \x0F"
ctrl-Cv = "/input insert \x16"
ctrl-D = "/input delete_next_char"
ctrl-E = "/input move_end_of_line"
ctrl-F = "/input move_next_char"
ctrl-H = "/input delete_previous_char"
ctrl-I = "/input complete_next"
ctrl-J = "/input return"
ctrl-K = "/input delete_end_of_line"
ctrl-L = "/window refresh"
ctrl-M = "/input return"
ctrl-N = "/buffer +1"
ctrl-P = "/buffer -1"
ctrl-R = "/input search_text_here"
ctrl-Sctrl-U = "/input set_unread"
ctrl-T = "/input transpose_chars"
ctrl-U = "/input delete_beginning_of_line"
ctrl-W = "/input delete_previous_word"
ctrl-X = "/input switch_active_buffer"
ctrl-Y = "/input clipboard_paste"
meta-meta-OP = "/bar scroll buflist * b"
meta-meta-OQ = "/bar scroll buflist * e"
meta-meta2-1~ = "/window scroll_top"
meta-meta2-23~ = "/bar scroll nicklist * b"
meta-meta2-24~ = "/bar scroll nicklist * e"
meta-meta2-4~ = "/window scroll_bottom"
meta-meta2-5~ = "/window scroll_up"
meta-meta2-6~ = "/window scroll_down"
meta-meta2-7~ = "/window scroll_top"
meta-meta2-8~ = "/window scroll_bottom"
meta-meta2-A = "/buffer -1"
meta-meta2-B = "/buffer +1"
meta-meta2-C = "/buffer +1"
meta-meta2-D = "/buffer -1"
meta-- = "/filter toggle @"
meta-/ = "/input jump_last_buffer_displayed"
meta-0 = "/buffer *10"
meta-1 = "/buffer *1"
meta-2 = "/buffer *2"
meta-3 = "/buffer *3"
meta-4 = "/buffer *4"
meta-5 = "/buffer *5"
meta-6 = "/buffer *6"
meta-7 = "/buffer *7"
meta-8 = "/buffer *8"
meta-9 = "/buffer *9"
meta-< = "/input jump_previously_visited_buffer"
meta-= = "/filter toggle"
meta-> = "/input jump_next_visited_buffer"
meta-OA = "/input history_global_previous"
meta-OB = "/input history_global_next"
meta-OC = "/input move_next_word"
meta-OD = "/input move_previous_word"
meta-OF = "/input move_end_of_line"
meta-OH = "/input move_beginning_of_line"
meta-OP = "/bar scroll buflist * -100%"
meta-OQ = "/bar scroll buflist * +100%"
meta-Oa = "/input history_global_previous"
meta-Ob = "/input history_global_next"
meta-Oc = "/input move_next_word"
meta-Od = "/input move_previous_word"
meta2-15~ = "/buffer -1"
meta2-17~ = "/buffer +1"
meta2-18~ = "/window -1"
meta2-19~ = "/window +1"
meta2-1;3A = "/buffer -1"
meta2-1;3B = "/buffer +1"
meta2-1;3C = "/buffer +1"
meta2-1;3D = "/buffer -1"
meta2-1;3F = "/window scroll_bottom"
meta2-1;3H = "/window scroll_top"
meta2-1;5A = "/input history_global_previous"
meta2-1;5B = "/input history_global_next"
meta2-1;5C = "/input move_next_word"
meta2-1;5D = "/input move_previous_word"
meta2-1~ = "/input move_beginning_of_line"
meta2-200~ = "/input paste_start"
meta2-201~ = "/input paste_stop"
meta2-20~ = "/bar scroll title * -30%"
meta2-21~ = "/bar scroll title * +30%"
meta2-23;3~ = "/bar scroll nicklist * b"
meta2-23~ = "/bar scroll nicklist * -100%"
meta2-24;3~ = "/bar scroll nicklist * e"
meta2-24~ = "/bar scroll nicklist * +100%"
meta2-3~ = "/input delete_next_char"
meta2-4~ = "/input move_end_of_line"
meta2-5;3~ = "/window scroll_up"
meta2-5~ = "/window page_up"
meta2-6;3~ = "/window scroll_down"
meta2-6~ = "/window page_down"
meta2-7~ = "/input move_beginning_of_line"
meta2-8~ = "/input move_end_of_line"
meta2-A = "/input history_previous"
meta2-B = "/input history_next"
meta2-C = "/input move_next_char"
meta2-D = "/input move_previous_char"
meta2-F = "/input move_end_of_line"
meta2-G = "/window page_down"
meta2-H = "/input move_beginning_of_line"
meta2-I = "/window page_up"
meta2-Z = "/input complete_previous"
meta2-[E = "/buffer -1"
meta-_ = "/input redo"
meta-a = "/input jump_smart"
meta-b = "/input move_previous_word"
meta-d = "/input delete_next_word"
meta-f = "/input move_next_word"
meta-h = "/input hotlist_clear"
meta-jmeta-f = "/buffer -"
meta-jmeta-l = "/buffer +"
meta-jmeta-r = "/server raw"
meta-jmeta-s = "/server jump"
meta-j01 = "/buffer *1"
meta-j02 = "/buffer *2"
meta-j03 = "/buffer *3"
meta-j04 = "/buffer *4"
meta-j05 = "/buffer *5"
meta-j06 = "/buffer *6"
meta-j07 = "/buffer *7"
meta-j08 = "/buffer *8"
meta-j09 = "/buffer *9"
meta-j10 = "/buffer *10"
meta-j11 = "/buffer *11"
meta-j12 = "/buffer *12"
meta-j13 = "/buffer *13"
meta-j14 = "/buffer *14"
meta-j15 = "/buffer *15"
meta-j16 = "/buffer *16"
meta-j17 = "/buffer *17"
meta-j18 = "/buffer *18"
meta-j19 = "/buffer *19"
meta-j20 = "/buffer *20"
meta-j21 = "/buffer *21"
meta-j22 = "/buffer *22"
meta-j23 = "/buffer *23"
meta-j24 = "/buffer *24"
meta-j25 = "/buffer *25"
meta-j26 = "/buffer *26"
meta-j27 = "/buffer *27"
meta-j28 = "/buffer *28"
meta-j29 = "/buffer *29"
meta-j30 = "/buffer *30"
meta-j31 = "/buffer *31"
meta-j32 = "/buffer *32"
meta-j33 = "/buffer *33"
meta-j34 = "/buffer *34"
meta-j35 = "/buffer *35"
meta-j36 = "/buffer *36"
meta-j37 = "/buffer *37"
meta-j38 = "/buffer *38"
meta-j39 = "/buffer *39"
meta-j40 = "/buffer *40"
meta-j41 = "/buffer *41"
meta-j42 = "/buffer *42"
meta-j43 = "/buffer *43"
meta-j44 = "/buffer *44"
meta-j45 = "/buffer *45"
meta-j46 = "/buffer *46"
meta-j47 = "/buffer *47"
meta-j48 = "/buffer *48"
meta-j49 = "/buffer *49"
meta-j50 = "/buffer *50"
meta-j51 = "/buffer *51"
meta-j52 = "/buffer *52"
meta-j53 = "/buffer *53"
meta-j54 = "/buffer *54"
meta-j55 = "/buffer *55"
meta-j56 = "/buffer *56"
meta-j57 = "/buffer *57"
meta-j58 = "/buffer *58"
meta-j59 = "/buffer *59"
meta-j60 = "/buffer *60"
meta-j61 = "/buffer *61"
meta-j62 = "/buffer *62"
meta-j63 = "/buffer *63"
meta-j64 = "/buffer *64"
meta-j65 = "/buffer *65"
meta-j66 = "/buffer *66"
meta-j67 = "/buffer *67"
meta-j68 = "/buffer *68"
meta-j69 = "/buffer *69"
meta-j70 = "/buffer *70"
meta-j71 = "/buffer *71"
meta-j72 = "/buffer *72"
meta-j73 = "/buffer *73"
meta-j74 = "/buffer *74"
meta-j75 = "/buffer *75"
meta-j76 = "/buffer *76"
meta-j77 = "/buffer *77"
meta-j78 = "/buffer *78"
meta-j79 = "/buffer *79"
meta-j80 = "/buffer *80"
meta-j81 = "/buffer *81"
meta-j82 = "/buffer *82"
meta-j83 = "/buffer *83"
meta-j84 = "/buffer *84"
meta-j85 = "/buffer *85"
meta-j86 = "/buffer *86"
meta-j87 = "/buffer *87"
meta-j88 = "/buffer *88"
meta-j89 = "/buffer *89"
meta-j90 = "/buffer *90"
meta-j91 = "/buffer *91"
meta-j92 = "/buffer *92"
meta-j93 = "/buffer *93"
meta-j94 = "/buffer *94"
meta-j95 = "/buffer *95"
meta-j96 = "/buffer *96"
meta-j97 = "/buffer *97"
meta-j98 = "/buffer *98"
meta-j99 = "/buffer *99"
meta-k = "/input grab_key_command"
meta-l = "/window bare"
meta-m = "/mute mouse toggle"
meta-n = "/window scroll_next_highlight"
meta-p = "/window scroll_previous_highlight"
meta-r = "/input delete_line"
meta-s = "/mute aspell toggle"
meta-u = "/window scroll_unread"
meta-wmeta-meta2-A = "/window up"
meta-wmeta-meta2-B = "/window down"
meta-wmeta-meta2-C = "/window right"
meta-wmeta-meta2-D = "/window left"
meta-wmeta2-1;3A = "/window up"
meta-wmeta2-1;3B = "/window down"
meta-wmeta2-1;3C = "/window right"
meta-wmeta2-1;3D = "/window left"
meta-wmeta-b = "/window balance"
meta-wmeta-s = "/window swap"
meta-x = "/input zoom_merged_buffer"
meta-z = "/window zoom"
ctrl-_ = "/input undo"

[key_search]
ctrl-I = "/input search_switch_where"
ctrl-J = "/input search_stop_here"
ctrl-M = "/input search_stop_here"
ctrl-Q = "/input search_stop"
ctrl-R = "/input search_switch_regex"
meta2-A = "/input search_previous"
meta2-B = "/input search_next"
meta-c = "/input search_switch_case"

[key_cursor]
ctrl-J = "/cursor stop"
ctrl-M = "/cursor stop"
meta-meta2-A = "/cursor move area_up"
meta-meta2-B = "/cursor move area_down"
meta-meta2-C = "/cursor move area_right"
meta-meta2-D = "/cursor move area_left"
meta2-1;3A = "/cursor move area_up"
meta2-1;3B = "/cursor move area_down"
meta2-1;3C = "/cursor move area_right"
meta2-1;3D = "/cursor move area_left"
meta2-A = "/cursor move up"
meta2-B = "/cursor move down"
meta2-C = "/cursor move right"
meta2-D = "/cursor move left"
@item(buffer_nicklist):K = "/window ${_window_number};/kickban ${nick}"
@item(buffer_nicklist):b = "/window ${_window_number};/ban ${nick}"
@item(buffer_nicklist):k = "/window ${_window_number};/kick ${nick}"
@item(buffer_nicklist):q = "/window ${_window_number};/query ${nick};/cursor stop"
@item(buffer_nicklist):w = "/window ${_window_number};/whois ${nick}"
@chat:Q = "hsignal:chat_quote_time_prefix_message;/cursor stop"
@chat:m = "hsignal:chat_quote_message;/cursor stop"
@chat:q = "hsignal:chat_quote_prefix_message;/cursor stop"

[key_mouse]
@bar(buflist):ctrl-wheeldown = "hsignal:buflist_mouse"
@bar(buflist):ctrl-wheelup = "hsignal:buflist_mouse"
@bar(input):button2 = "/input grab_mouse_area"
@bar(nicklist):button1-gesture-down = "/bar scroll nicklist ${_window_number} +100%"
@bar(nicklist):button1-gesture-down-long = "/bar scroll nicklist ${_window_number} e"
@bar(nicklist):button1-gesture-up = "/bar scroll nicklist ${_window_number} -100%"
@bar(nicklist):button1-gesture-up-long = "/bar scroll nicklist ${_window_number} b"
@chat(fset.fset):button1 = "/window ${_window_number};/fset -go ${_chat_line_y}"
@chat(fset.fset):button2* = "hsignal:fset_mouse"
@chat(fset.fset):wheeldown = "/fset -down 5"
@chat(fset.fset):wheelup = "/fset -up 5"
@chat(perl.iset):button1 = "hsignal:iset_mouse"
@chat(perl.iset):button2* = "hsignal:iset_mouse"
@chat(perl.iset):wheeldown = "/repeat 5 /iset **down"
@chat(perl.iset):wheelup = "/repeat 5 /iset **up"
@chat(script.scripts):button1 = "/window ${_window_number};/script go ${_chat_line_y}"
@chat(script.scripts):button2 = "/window ${_window_number};/script go ${_chat_line_y};/script installremove -q ${script_name_with_extension}"
@chat(script.scripts):wheeldown = "/script down 5"
@chat(script.scripts):wheelup = "/script up 5"
@item(buffer_nicklist):button1 = "/window ${_window_number};/query ${nick}"
@item(buffer_nicklist):button1-gesture-left = "/window ${_window_number};/kick ${nick}"
@item(buffer_nicklist):button1-gesture-left-long = "/window ${_window_number};/kickban ${nick}"
@item(buffer_nicklist):button2 = "/window ${_window_number};/whois ${nick}"
@item(buffer_nicklist):button2-gesture-left = "/window ${_window_number};/ban ${nick}"
@item(buflist):button1* = "hsignal:buflist_mouse"
@item(buflist):button2* = "hsignal:buflist_mouse"
@item(buflist2):button1* = "hsignal:buflist_mouse"
@item(buflist2):button2* = "hsignal:buflist_mouse"
@item(buflist3):button1* = "hsignal:buflist_mouse"
@item(buflist3):button2* = "hsignal:buflist_mouse"
@bar:wheeldown = "/bar scroll ${_bar_name} ${_window_number} +20%"
@bar:wheelup = "/bar scroll ${_bar_name} ${_window_number} -20%"
@chat:button1 = "/window ${_window_number}"
@chat:button1-gesture-left = "/window ${_window_number};/buffer -1"
@chat:button1-gesture-left-long = "/window ${_window_number};/buffer 1"
@chat:button1-gesture-right = "/window ${_window_number};/buffer +1"
@chat:button1-gesture-right-long = "/window ${_window_number};/input jump_last_buffer"
@chat:ctrl-wheeldown = "/window scroll_horiz -window ${_window_number} +10%"
@chat:ctrl-wheelup = "/window scroll_horiz -window ${_window_number} -10%"
@chat:wheeldown = "/window scroll_down -window ${_window_number}"
@chat:wheelup = "/window scroll_up -window ${_window_number}"
@*:button3 = "/cursor go ${_x},${_y}"
#+END_SRC

*** weechat tangle

+ home dir

#+NAME: weechat.conf-home-dir
#+BEGIN_SRC conf :noweb yes :tangle "~/.config/weechat/weechat.conf"
<<weechat.conf>>
#+END_SRC

+ current dir

#+NAME: weechat.conf-current-dir
#+BEGIN_SRC conf :noweb yes :tangle ".config/weechat/weechat.conf"
<<weechat.conf>>
#+END_SRC

** xkb
*** xkb config
**** rules
***** evdev

#+NAME: evdev
#+begin_src conf
! option = symbols
  custom:alt_win_ctrl = +custom(alt_win_ctrl)

! include %S/evdev
#+end_src

***** evdev.xml

#+NAME: evdev.xml
#+begin_src xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE xkbConfigRegistry SYSTEM "xkb.dtd">
<xkbConfigRegistry version="1.1">
  <layoutList>
    <layout>
      <configItem>
        <name>gb</name>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>alt_win_ctrl</name>
            <shortDescription>alt_win_ctrl</shortDescription>
            <description>GB(alt_win_ctrl)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
  </layoutList>
  <optionList>
    <group allowMultipleSelection="true">
      <configItem>
        <name>custom</name>
        <description>custom options</description>
      </configItem>
      <option>
        <configItem>
          <name>custom:alt_win_ctrl</name>
          <description>Ctrl is mapped to Alt, Alt to Win, and Win to the Ctrl key.</description>
        </configItem>
      </option>
    </group>
  </optionList>
</xkbConfigRegistry>
#+end_src

**** symbols
***** custom

#+NAME: xkb-custom
#+BEGIN_SRC conf
// Ctrl is mapped to Alt, Alt to Win, and Win to the Ctrl key.
partial modifier_keys
xkb_symbols "alt_win_ctrl" {
    key <LALT> { [ Super_L ] };
    key <LWIN> { [ Control_L, Control_L ] };
    key <LCTL> { [ Alt_L, Meta_L ] };
    key <AE03> { [ 3, numbersign, sterling ] };
};
#+END_SRC

***** gb

#+NAME: xkb-gb
#+BEGIN_SRC conf
default partial alphanumeric_keys 
xkb_symbols "alt_win_ctrl" {

    // mac swap alt_win_ctrl

    // include "macintosh_vndr/gb"

    name[Group1]= "alt_win_ctrl - Mac";

    key <LALT> { [ Super_L ] };
    key <LWIN> { [ Control_L, Control_L ] };
    key <LCTL> { [ Alt_L, Meta_L ] };
    key <AE03> { [ 3, numbersign, sterling ] };
};
#+END_SRC

*** xkb tangle
**** rules
***** evdev

+ home dir

#+NAME: evdev-home-dir
#+BEGIN_SRC conf :noweb yes :tangle "~/.config/xkb/rules/evdev"
<<evdev>>
#+END_SRC

+ current dir

#+NAME: evdev-current-dir
#+BEGIN_SRC conf :noweb yes :tangle ".config/xkb/rules/evdev"
<<evdev>>
#+END_SRC

***** evdev.xml

+ home dir

#+NAME: evdev-home-dir
#+BEGIN_SRC conf :noweb yes :tangle "~/.config/xkb/rules/evdev.xml"
<<evdev.xml>>
#+END_SRC

+ current dir

#+NAME: evdev-current-dir
#+BEGIN_SRC conf :noweb yes :tangle ".config/xkb/rules/evdev.xml"
<<evdev.xml>>
#+END_SRC
**** symbols
***** custom

+ home dir

#+NAME: xkb-custom-home-dir
#+BEGIN_SRC conf :noweb yes :tangle "~/.config/xkb/symbols/custom"
<<xkb-custom>>
#+END_SRC

+ current dir

#+NAME: xkb-custom-current-dir
#+BEGIN_SRC conf :noweb yes :tangle ".config/xkb/symbols/custom"
<<xkb-custom>>
#+END_SRC

***** gb

+ home dir

#+NAME: xkb-gb-home-dir
#+BEGIN_SRC conf :noweb yes :tangle "~/.config/xkb/symbols/gb"
<<xkb-gb>>
#+END_SRC

+ current dir

#+NAME: xkb-gb-current-dir
#+BEGIN_SRC conf :noweb yes :tangle ".config/xkb/symbols/gb"
<<xkb-gb>>
#+END_SRC

